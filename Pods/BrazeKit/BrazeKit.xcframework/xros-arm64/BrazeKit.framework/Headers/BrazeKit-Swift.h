#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef BRAZEKIT_SWIFT_H
#define BRAZEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebKit;
#else
#import <Foundation/Foundation.h>
#import <WebKit/WebKit.h>
#import <dispatch/dispatch.h>
#import <objc/runtime.h>
#import <UIKit/UIKit.h>
#import <UserNotifications/UserNotifications.h>
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BrazeKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




@class NSString;

/// API / platform communication configuration.
SWIFT_CLASS_NAMED("Api")
@interface BRZConfigurationApi : NSObject
/// The Braze api key.
@property (nonatomic, copy) NSString * _Nullable key;
/// The api endpoint used by the SDK.
@property (nonatomic, copy) NSString * _Nullable endpoint;
/// The interval in seconds between automatic data flushes (default: <code>10</code> seconds).
/// This value is used when <code>requestPolicy</code> is set to <code>automatic</code>.
@property (nonatomic) NSTimeInterval flushInterval;
/// Enables SDK authentication (default: <code>false</code>).
@property (nonatomic) BOOL sdkAuthentication;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BRZRequestPolicy : NSInteger;
enum BRZSDKFlavor : NSInteger;
@class BRZSDKMetadata;
@class BRZTrackingProperty;

@interface BRZConfigurationApi (SWIFT_EXTENSION(BrazeKit))
/// The request policy (default: <code>.automatic</code>).
/// Regardless of policy, Braze will intelligently combine requests on the request queue to
/// minimize the total number of requests and their combined payload.
/// <h2>Objective-C</h2>
/// In Objective-C, use <code>BRZRequestPolicy</code> instead:
/// \code
/// configuration.requestPolicy = BRZRequestPolicy.automatic // or BRZRequestPolicy.manual
///
/// \endcode
@property (nonatomic) enum BRZRequestPolicy requestPolicy;
/// Internal.
@property (nonatomic) enum BRZSDKFlavor sdkFlavor;
/// The details around the type of Braze SDK integration.
/// To append values, call <code>addSDKMetadata:</code> with an array of <code>SDKMetadata</code> types.
@property (nonatomic, readonly, copy) NSArray<BRZSDKMetadata *> * _Nonnull sdkMetadata;
/// Appends the <code>SDKMetadata</code> types to the existing array.
/// <h2>Objective-C</h2>
/// In Objective-C, pass an array of <code>BRZSDKMetadata</code> keys instead:
/// \code
/// [configuration.api addSDKMetadata:@[
///   BRZSDKMetadata.swiftpm,
///   BRZSDKMetadata.expo
/// ]];
///
/// \endcode
- (void)addSDKMetadata:(NSArray<BRZSDKMetadata *> * _Nonnull)sdkMetadata;
/// The list of properties to be collected for tracking users (default: an empty list).
/// The SDK will route collection of any of the data into a separate tracking endpoint,
/// which must be declared in the privacy manifest.
@property (nonatomic, copy) NSSet<BRZTrackingProperty *> * _Nonnull trackingPropertyAllowList;
@end

@class BRZConfiguration;
@class BRZUser;
@class BRZNotifications;
@class BRZContentCards;
@class BRZNewsFeed;
@class BRZFeatureFlags;
@protocol BrazeSDKAuthDelegate;

/// <code>Braze</code> is the main entry point of the BrazeKit module and provides access to all its features.
/// <h2>Cheatsheet</h2>
/// \code
/// // Initialization
/// let configuration = Braze.Configuration(apiKey: "<BRAZE_API_KEY>", endpoint: "<BRAZE_ENDPOINT>")
/// let braze = Braze(configuration: configuration)
///
/// // Identify user
/// braze.changeUser(userId: userId)
///
/// // Update user attributes
/// braze.user.set(email: "user@example.com")
///
/// // Log custom events
/// braze.logCustomEvent(name: "custom_event")
///
/// \endcode
SWIFT_CLASS("_TtC8BrazeKit5Braze")
@interface Braze : NSObject
/// SDK version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Specify whether the Braze SDK is enabled or not.
/// When set to <code>false</code>, the Braze SDK ignores any call to the public api. The SDK also cancels
/// all in-flight actions (network requests, event processing, etc.).
/// The SDK remains disabled until this value is set to <code>true</code>. The value persists across app
/// launches.
@property (nonatomic) BOOL enabled;
/// The configuration used to create this braze instance.
@property (nonatomic, readonly, strong) BRZConfiguration * _Nonnull configuration;
/// User module.
/// Use methods from this module to mutate the current user, set attributes, etc.
@property (nonatomic, readonly, strong) BRZUser * _Nonnull user;
/// Notification module.
/// Use methods from this module to handle remote notifications.
@property (nonatomic, readonly, strong) BRZNotifications * _Nonnull notifications;
/// Content Cards module.
/// Access the content cards, related properties and methods from this module.
@property (nonatomic, readonly, strong) BRZContentCards * _Nonnull contentCards;
/// NewsFeed module.
/// Access the newsfeed cards, related properties and methods from this module.
@property (nonatomic, readonly, strong) BRZNewsFeed * _Nonnull newsFeed;
/// Feature Flags module.
/// Access the feature flags, related properties and methods from this module.
@property (nonatomic, readonly, strong) BRZFeatureFlags * _Nonnull featureFlags;
/// SDK Authentication delegate for the <code>Braze</code> instance.
/// The delegate can react to specific authentication events, such as during an authentication
/// error.
@property (nonatomic, weak) id <BrazeSDKAuthDelegate> _Nullable sdkAuthDelegate;
/// The current device identifier.
/// warning:
/// The device identifier is <code>"undefined"</code> when the SDK is initialized in the
/// disabled state (when <code>enabled</code> is <code>false</code>, e.g. after previously disabling the
/// SDK).
/// important:
/// On iOS, tvOS and Mac Catalyst, the device identifier currently defaults to the
/// identifier for vendor (<a href="https://apple.co/3rSyyZm">IDFV</a>). To use a randomly
/// generated UUID, set <code>Braze/Configuration-swift.class/useUUIDAsDeviceId</code> to
/// <code>true</code>.
/// In the future, this will become the default behavior.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
/// See <code>init(configuration:)</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Creates an instance of the Braze SDK.
/// The Braze instance must be retained to keep the SDK running.
/// <h2>Usage</h2>
/// \code
/// // Create configuration
/// var configuration = Configuration(apiKey: "BRAZE API KEY", endpoint: "BRAZE ENDPOINT")
///
/// // Create Braze instance
/// let braze = Braze(configuration: configuration)
///
/// // Keep a reference to the Braze instance
/// // - Here we keep the instance via a static property on the AppDelegate
/// AppDelegate.braze = braze
///
/// \endcode\param configuration The SDK configuration.
///
- (nonnull instancetype)initWithConfiguration:(BRZConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class NSDate;

/// The user module allows setting attributes on the current user.
SWIFT_CLASS_NAMED("User")
@interface BRZUser : NSObject
/// Retrieves the current user identifier (<code>nil</code> for the anonymous user).
/// \param queue The queue on which the completion handler is called (default: <code>main</code>).
///
/// \param completion The completion handler’s parameter is the user identifier. This identifier
/// is <code>nil</code> for the anonymous user.
///
- (void)idOnQueue:(dispatch_queue_t _Nonnull)queue completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// Sets the user first name.
/// \param firstName The first name.
///
- (void)setFirstName:(NSString * _Nullable)firstName;
/// Sets the user last name.
/// \param lastName The last name.
///
- (void)setLastName:(NSString * _Nullable)lastName;
/// Sets the user date of birth.
/// \param dateOfBirth The date of birth.
///
- (void)setDateOfBirth:(NSDate * _Nullable)dateOfBirth;
/// Sets the user country.
/// \param country The country.
///
- (void)setCountry:(NSString * _Nullable)country;
/// Sets the user home city.
/// \param homeCity The home city.
///
- (void)setHomeCity:(NSString * _Nullable)homeCity;
/// Sets the user phone number.
/// \param phoneNumber The phone number.
///
- (void)setPhoneNumber:(NSString * _Nullable)phoneNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class NSURL;
@class UIScene;
@class UIViewController;

/// An url and its associated context.
SWIFT_CLASS_NAMED("URLContext")
@interface BRZURLContext : NSObject
/// The url.
@property (nonatomic, copy) NSURL * _Nonnull url;
/// Specify whether the url should be opened in a modal webview.
@property (nonatomic) BOOL useWebView;
/// Specify whether the URL should be opened as a universal link.
/// This value is automatically set by the SDK when
/// <code>BrazeKit/Braze/Configuration-swift.class/forwardUniversalLinks</code> is enabled and the url
/// matches one of your application entitlements’ applinks.
/// When true, the SDK forwards the URL to the system methods defined in
/// <a href="https://developer.apple.com/documentation/xcode/supporting-universal-links-in-your-app">Supporting universal links in your app</a>.
@property (nonatomic) BOOL isUniversalLink;
/// Extra data associated with the campaign.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull extras;
/// The target scene in which the url will be opened.
@property (nonatomic, strong) UIScene * _Nullable targetScene SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
/// The target view controller in which the url will be opened (overrides <code>targetScene</code>).
@property (nonatomic, strong) UIViewController * _Nullable targetViewController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BRZSessionEvent;
@class BRZCancellable;

@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// Subscribes to session updates.
/// \param update The update handler executed on the main thread with the latest session
/// event.
///
///
/// returns:
/// A cancellable. You must keep a strong reference to the cancellable to keep the
/// subscription active. The subscription is automatically cancelled when the
/// cancellable is deinitialized. Alternatively, you can call
/// <code>Braze/Cancellable/cancel()</code> to cancel the subscription.
- (BRZCancellable * _Nonnull)subscribeToSessionUpdates:(void (^ _Nonnull)(BRZSessionEvent * _Nonnull))update SWIFT_WARN_UNUSED_RESULT;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// An SDK authentication error.
SWIFT_CLASS_NAMED("SDKAuthenticationError")
@interface BRZSDKAuthenticationError : NSObject
/// Error code describing the cause of the signature authentication failure.
@property (nonatomic, readonly) NSInteger code;
/// Human-readable cause of the signature authentication failure.
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/// The external user id on the failed request.
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// The signature present on the request that failed.
@property (nonatomic, readonly, copy) NSString * _Nullable signature;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class NSBundle;

/// Resources related utilities.
SWIFT_CLASS_NAMED("Resources")
@interface BRZResources : NSObject
/// The resources bundle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nullable bundle;)
+ (NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Acknowledgments for third-party open-source libraries used by BrazeKit.
/// The dictionary maps the library name to the path to the license on the file system.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSDictionary<NSString *, NSURL *> * _Nonnull acknowledgments;)
+ (NSDictionary<NSString *, NSURL *> * _Nonnull)acknowledgments SWIFT_WARN_UNUSED_RESULT;
/// Path to the Braze SDK license.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable license;)
+ (NSURL * _Nullable)license SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class NSData;
@class UNNotificationResponse;
@class BRZNotificationsPayload;

/// The notifications module exposes the Braze SDK push-related handler.
SWIFT_CLASS_NAMED("Notifications")
@interface BRZNotifications : NSObject
/// The notification device token currently registered with Braze.
@property (nonatomic, readonly, copy) NSData * _Nullable deviceToken;
/// Asks Braze to handle the remote background notification.
/// Forward the <code>userInfo</code> dictionary and the <code>completionHandler</code> closure from your
/// <code>AppDelegate.application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
/// implementation.
/// <h2>Returns</h2>
/// A boolean indicating whether Braze has processed the background notification.
/// <ul>
///   <li>
///     <code>true</code>:
///     <ul>
///       <li>
///         Valid Braze remote notification
///       </li>
///       <li>
///         Braze calls <code>completionHandler</code> automatically when appropriate
///         <ul>
///           <li>
///             ⚠️ Do not call <code>completionHandler</code> in your implementation
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>false</code>:
///     <ul>
///       <li>
///         Invalid Braze remote notification (e.g. in-house notification)
///       </li>
///       <li>
///         Braze <em>will not</em> call <code>completionHandler</code> automatically
///         <ul>
///           <li>
///             ⚠️ You must call <code>completionHandler</code> in your implementation
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <h2>Minimal implementation</h2>
/// \code
/// // In UIApplicationDelegate implementation.
///
/// func application(
///   _ application: UIApplication,
///   didReceiveRemoteNotification userInfo: [AnyHashable: Any],
///   fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
/// ) {
///   // Forward background notification to Braze.
///   if braze.notifications.handleBackgroundNotification(
///     userInfo: userInfo,
///     fetchCompletionHandler: completionHandler
///   ) {
///    // Braze handled the notification, nothing more to do.
///    return
///  }
///
///  // Braze did not handle this remote background notification.
///  // Manually call the completion handler to let the system know
///  // that the background notification is processed.
///  completionHandler(.noData)
/// }
///
/// \endcode\param userInfo The notification userInfo dictionary.
///
/// \param completionHandler The fetch completion handler closure.
///
- (BOOL)handleBackgroundNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Asks Braze to handle the user notification response.
/// Forward the notification <code>response</code> and the <code>completionHandler</code> closure from your
/// <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:didReceive:withCompletionHandler:)</code>
/// implementation.
/// <h2>Returns</h2>
/// A boolean indicating whether Braze has processed the user notification.
/// <ul>
///   <li>
///     <code>true</code>:
///     <ul>
///       <li>
///         Valid Braze remote notification
///       </li>
///       <li>
///         Braze calls <code>completionHandler</code> automatically when appropriate
///         <ul>
///           <li>
///             ⚠️ Do not call <code>completionHandler</code> in your implementation
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
///   <li>
///     <code>false</code>:
///     <ul>
///       <li>
///         Invalid Braze remote notification (e.g. in-house notification)
///       </li>
///       <li>
///         Braze <em>will not</em> call <code>completionHandler</code> automatically
///         <ul>
///           <li>
///             ⚠️ You must call <code>completionHandler</code> in your implementation
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
/// <h2>Minimal implementation</h2>
/// \code
/// // In UNUserNotificationCenterDelegate implementation.
///
/// func userNotificationCenter(
///   _ center: UNUserNotificationCenter,
///   didReceive response: UNNotificationResponse,
///   withCompletionHandler completionHandler: @escaping () -> Void
/// ) {
///   // Forward user notification to Braze.
///   if Host.braze.notifications.handleUserNotification(
///     response: response,
///     withCompletionHandler: completionHandler
///   ) {
///     // Braze handled the notification, nothing more to do.
///     return
///   }
///
///   // Braze did not handle this user notification, manually
///   // call the completion handler to let the system know
///   // that the user notification is processed.
///   completionHandler()
/// }
///
/// \endcode\param response The user notification response.
///
/// \param completionHandler The completion handler closure.
///
- (BOOL)handleUserNotificationWithResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to notifications updates.
/// \param update The update handler executed on the main thread with the latest
/// notification processed by the SDK.
///
///
/// returns:
/// A cancellable. You must keep a strong reference to the cancellable to keep the
/// subscription active. The subscription is automatically cancelled when the
/// cancellable is deinitialized. Alternatively, you can call
/// <code>Braze/Cancellable/cancel()</code> to cancel the subscription.
- (BRZCancellable * _Nonnull)subscribeToUpdates:(void (^ _Nonnull)(BRZNotificationsPayload * _Nonnull))update SWIFT_WARN_UNUSED_RESULT;
/// Specifies whether the push notification was sent by Braze.
/// \param userInfo The notification userInfo dictionary.
///
+ (BOOL)isBrazeNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Specifies whether the push notification was sent by Braze for an internal feature.
/// \param userInfo The notification userInfo dictionary.
///
+ (BOOL)isInternalNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class BRZNewsFeedCardContext;

SWIFT_CLASS_NAMED("NewsFeedCard")
@interface BRZNewsFeedCard : NSObject
/// The card identifier (default: random UUID string).
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// The card image URL (default: <code>nil</code>).
@property (nonatomic, copy) NSURL * _Nullable image;
/// The card title (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable title;
/// The card description (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable cardDescription;
/// The card domain (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable domain;
/// The card URL (default: <code>nil</code>).
@property (nonatomic, copy) NSURL * _Nullable url;
/// Specifies whether the <code>url</code> should be opened in a web view (default: <code>true</code>).
@property (nonatomic) BOOL useWebView;
/// The card extras dictionary (default: <code>[:]</code>).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extras;
/// The card viewed state (default: <code>false</code>).
@property (nonatomic) BOOL viewed;
/// The card creation timestamp (default: <code>0</code>).
@property (nonatomic) NSTimeInterval created;
/// The card last update timestamp (default: <code>0</code>).
@property (nonatomic) NSTimeInterval updated;
/// The card expiration timestamp (default: <code>-1</code>, never expires).
@property (nonatomic) NSTimeInterval expires;
/// The card context.
@property (nonatomic, strong) BRZNewsFeedCardContext * _Nullable context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// The newsfeed module exposes the Braze SDK newsfeed related properties and methods.
SWIFT_CLASS_NAMED("NewsFeed")
@interface BRZNewsFeed : NSObject
/// The newsfeed cards for the current user.
@property (nonatomic, readonly, copy) NSArray<BRZNewsFeedCard *> * _Nonnull cards;
/// The last time the newsfeed cards for the current user were updated from the Braze servers.
@property (nonatomic, readonly, copy) NSDate * _Nullable lastUpdate;
/// Subscribes to newsfeed updates.
/// \param update The update handler executed on the main thread with the latest newsfeed
/// cards
///
///
/// returns:
/// A cancellable. You must keep a strong reference to the cancellable to keep the
/// subscription active. The subscription is automatically cancelled when the
/// cancellable is deinitialized. Alternatively, you can call
/// <code>Braze/Cancellable/cancel()</code> to cancel the subscription.
- (BRZCancellable * _Nonnull)subscribeToUpdates:(void (^ _Nonnull)(NSArray<BRZNewsFeedCard *> * _Nonnull))update SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// A modal presentation context.
SWIFT_CLASS_NAMED("ModalContext")
@interface BRZModalContext : NSObject
/// View controller used for presenting the modal.
@property (nonatomic, strong) UIViewController * _Nonnull presentingViewController;
/// Specify whether to animate the presentation of the modal.
@property (nonatomic) BOOL animatePresentation;
/// Specify whether to animate the dismissal of the modal.
@property (nonatomic) BOOL animateDismissal;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class BRZInAppMessageRawTheme;
@class BRZInAppMessageRawColor;
@class BRZInAppMessageRawButton;
@class BRZInAppMessageContext;

/// A compatibility representation of the In-App Message type.
/// This representation is provided for compatibility with Objective-C and wrapper SDKs. When
/// developing in Swift, prefer using the type-safe, always valid <code>InAppMessage</code> instead.
/// important:
/// This type does not guarantee that the message is valid. For instance it is
/// possible to create a raw <code>.modal</code> with no message text or header text. Such messages are
/// invalid and fail to convert to <code>InAppMessage</code>.
/// <h2>Usage</h2>
/// <ul>
///   <li>
///     Access the message click url
///   </li>
/// </ul>
/// \code
/// messageRaw.url
///
/// \endcode<ul>
///   <li>
///     Access the extras dictionary:
///   </li>
/// </ul>
/// \code
/// messageRaw.extras
///
/// \endcode<ul>
///   <li>
///     Modify the header text:
///   </li>
/// </ul>
/// \code
/// messageRaw.header = "This is a custom header"
///
/// \endcode<h2>Conversion to / from InAppMessage</h2>
/// <ul>
///   <li>
///     Convert to <code>InAppMessage</code>:
///   </li>
/// </ul>
/// \code
/// let message = try Braze.InAppMessage(messageRaw)
///
/// \endcode<ul>
///   <li>
///     Convert from <code>InAppMessage</code>:
///   </li>
/// </ul>
/// \code
/// let messageRaw = Braze.InAppMessageRaw(message)
///
/// \endcode
SWIFT_CLASS_NAMED("InAppMessageRaw")
@interface BRZInAppMessageRaw : NSObject
/// The message URL.
@property (nonatomic, copy) NSURL * _Nullable url;
/// Specifies whether the <code>url</code> should be opened in a web view.
@property (nonatomic) BOOL useWebView;
/// The message text.
@property (nonatomic, copy) NSString * _Nullable message;
/// The message header.
@property (nonatomic, copy) NSString * _Nullable header;
/// The message image URL.
@property (nonatomic, copy) NSURL * _Nullable imageURL;
/// The message <a href="https://fontawesome.com/v4.7/cheatsheet/">FontAwesome v4.3</a> icon.
@property (nonatomic, copy) NSString * _Nullable icon;
/// The message themes.
@property (nonatomic, copy) NSDictionary<NSString *, BRZInAppMessageRawTheme *> * _Nullable themes;
/// The message text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable textColor;
/// The message header text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable headerTextColor;
/// The message icon color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable iconColor;
/// The message icon background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable iconBackgroundColor;
/// The message background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable backgroundColor;
/// The message frame color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable frameColor;
/// The message close button color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nullable closeButtonColor;
/// The message buttons.
@property (nonatomic, copy) NSArray<BRZInAppMessageRawButton *> * _Nullable buttons;
/// Specifies whether the message should animate when presented.
@property (nonatomic) BOOL animateIn;
/// Specifies whether the message should animate when dismissed.
@property (nonatomic) BOOL animateOut;
/// The message extras dictionary (default: <code>[:]</code>).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extras;
/// The key-value pairs as a JSON string defined by the Braze Dashboard, if populated.
/// Associated with the <code>message_extras</code> Liquid tag.
@property (nonatomic, copy) NSString * _Nullable messageExtras;
/// The html message base URL.
@property (nonatomic, copy) NSURL * _Nullable baseURL;
/// The html message asset URLs.
@property (nonatomic, copy) NSArray<NSURL *> * _Nullable assetURLs;
/// Specifies whether the message is a control message.
@property (nonatomic) BOOL isControl;
/// Specifies whether the message was delivered as a test send (default: <code>false</code>).
@property (nonatomic, readonly) BOOL isTestSend;
/// Additional data fields for the message.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable messageFields;
/// The message context.
@property (nonatomic, strong) BRZInAppMessageContext * _Nullable context;
/// The message JSON representation, suitable for usage by Braze’s wrapper SDKs.
- (NSData * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Decodes the JSON into a raw In-App Message.
+ (nullable instancetype)decodingWithJson:(NSData * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Creates and return a raw In-App Message.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// A representation of the Feature Flag type.
SWIFT_CLASS_NAMED("FeatureFlag")
@interface BRZFeatureFlag : NSObject
/// The feature flag identifier (default: random UUID string).
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// The feature flag enabled state (default: <code>false</code>).
@property (nonatomic) BOOL enabled;
/// The feature flag associated properties (default: <code>[:]</code>).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
/// Optional tracking string used for logging impressions on a feature flag.
@property (nonatomic, copy) NSString * _Nullable flagTrackingString;
/// The string value for the property at <code>key</code>.
/// \param key The property key.
///
///
/// returns:
/// The string value if available, <code>nil</code> otherwise.
- (NSString * _Nullable)stringPropertyForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// The feature flags module exposes the Braze SDK feature flags related properties and methods.
SWIFT_CLASS_NAMED("FeatureFlags")
@interface BRZFeatureFlags : NSObject
/// The feature flags for the current user.
@property (nonatomic, readonly, copy) NSArray<BRZFeatureFlag *> * _Nonnull featureFlags;
/// Gets the feature flag for a specific identifier.
/// \param id The feature flag identifier.
///
///
/// returns:
/// The matching feature flag if any, or <code>nil</code> otherwise.
- (BRZFeatureFlag * _Nullable)featureFlagWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Subscribes to feature flags updates. If a previous refresh request has successfully completed this
/// session, immediately triggers the callback with the cached flags.
/// \param update The update handler executed on the main thread with the latest feature
/// flags.
///
///
/// returns:
/// A cancellable. You must keep a strong reference to the cancellable to keep the
/// subscription active. The subscription is automatically cancelled when the
/// cancellable is deinitialized. Alternatively, you can call
/// <code>Braze/Cancellable/cancel()</code> to cancel the subscription.
- (BRZCancellable * _Nonnull)subscribeToUpdates:(void (^ _Nonnull)(NSArray<BRZFeatureFlag *> * _Nonnull))update SWIFT_WARN_UNUSED_RESULT;
/// Logs an impression on a feature flag based on a given ID.
/// The feature flag must be part of a Braze campaign. Otherwise, no impression will be logged.
/// A feature flag impression can only be logged once per session for a given ID.
/// \param id The ID of the feature flag.
///
- (void)logFeatureFlagImpressionWithId:(NSString * _Nonnull)id;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// The content cards module exposes the Braze SDK content cards related properties and methods.
SWIFT_CLASS_NAMED("ContentCards")
@interface BRZContentCards : NSObject
/// The last time the content cards for the current user were updated from the Braze servers.
@property (nonatomic, readonly, copy) NSDate * _Nullable lastUpdate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class BRZContentCardContext;

/// A compatibility representation of the Content Card type.
/// This representation is provided for compatibility with Objective-C and wrapper SDKs. When
/// developing in Swift, prefer using the type-safe, always valid <code>ContentCard</code> instead.
/// important:
/// This type does not guarantee that the card is valid. For instance it is possible
/// to create a raw <code>.imageOnly</code> with no image url. Such cards are invalid and fail to convert to
/// <code>ContentCard</code>.
/// <h2>Usage</h2>
/// <ul>
///   <li>
///     Access the card click url
///   </li>
/// </ul>
/// \code
/// cardRaw.url
///
/// \endcode<ul>
///   <li>
///     Access the extras dictionary:
///   </li>
/// </ul>
/// \code
/// cardRaw.extras
///
/// \endcode<ul>
///   <li>
///     Modify the title:
///   </li>
/// </ul>
/// \code
/// cardRaw.title = "This is a custom title"
///
/// \endcode<h2>Conversion to / from InAppMessage</h2>
/// <ul>
///   <li>
///     Convert to <code>ContentCard</code>:
///   </li>
/// </ul>
/// \code
/// let card = try Braze.ContentCard(cardRaw)
///
/// \endcode<ul>
///   <li>
///     Convert from <code>ContentCard</code>:
///   </li>
/// </ul>
/// \code
/// let cardRaw = Braze.ContentCardRaw(card)
///
/// \endcode
SWIFT_CLASS_NAMED("ContentCardRaw")
@interface BRZContentCardRaw : NSObject
/// The card identifier (default: random UUID string).
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// The card image URL (default: <code>nil</code>).
@property (nonatomic, copy) NSURL * _Nullable image;
/// The card title (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable title;
/// The card description (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable cardDescription;
/// The card domain (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable domain;
/// The card URL (default: <code>nil</code>).
@property (nonatomic, copy) NSURL * _Nullable url;
/// Specifies whether the <code>url</code> should be opened in a web view (default: <code>true</code>).
@property (nonatomic) BOOL useWebView;
/// The card extras dictionary (default: <code>[:]</code>).
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull extras;
/// The card viewed state (default: <code>false</code>).
@property (nonatomic) BOOL viewed;
/// The card dismissible state (default: <code>false</code>).
@property (nonatomic) BOOL dismissible;
/// The card removed / dismissed state (default: <code>false</code>).
@property (nonatomic) BOOL removed;
/// The card pinned state (default: <code>false</code>).
@property (nonatomic) BOOL pinned;
/// The card clicked state (default: <code>false</code>).
@property (nonatomic) BOOL clicked;
/// Specify whether the card is a test content card (default: <code>false</code>).
@property (nonatomic) BOOL test;
/// The card creation timestamp (default: <code>0</code>).
@property (nonatomic) NSTimeInterval createdAt;
/// The card expiration timestamp (default: <code>-1</code>, never expires).
@property (nonatomic) NSTimeInterval expiresAt;
/// The card context.
@property (nonatomic, strong) BRZContentCardContext * _Nullable context;
/// The card JSON representation, suitable for usage by Braze’s wrapper SDKs.
- (NSData * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Decodes the JSON into a raw Content Card.
+ (nullable instancetype)decodingWithJson:(NSData * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Creates and return a raw Content Card.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Creates a raw card from the json data.
+ (BRZContentCardRaw * _Nullable)fromJson:(NSData * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class BRZConfigurationPush;
@class BRZConfigurationLocation;
@class BRZConfigurationLogger;

/// The Braze SDK configuration.
SWIFT_CLASS_NAMED("Configuration")
@interface BRZConfiguration : NSObject
/// Api configuration.
@property (nonatomic, strong) BRZConfigurationApi * _Nonnull api;
/// Push configuration.
@property (nonatomic, strong) BRZConfigurationPush * _Nonnull push;
/// Location configuration.
@property (nonatomic, strong) BRZConfigurationLocation * _Nonnull location;
/// Logger configuration.
@property (nonatomic, strong) BRZConfigurationLogger * _Nonnull logger;
/// The length of time before a session times out in seconds (default: <code>10</code>).
@property (nonatomic) NSTimeInterval sessionTimeout;
/// The minimum time interval in seconds between triggers (default: <code>30</code>).
/// After a trigger happens, the SDK will ignore any triggers until the minimum time interval
/// elapses. The minimum valid value is <code>0</code>.
@property (nonatomic) NSTimeInterval triggerMinimumTimeInterval;
/// Determines if a randomly generated UUID should be used as the device ID
/// Starting in 7.0.0, the default value for this property is <code>true</code>.
/// Disable this flag to use the device’s <code>identifierForVendor</code> (<a href="https://apple.co/3rSyyZm">IDFV</a>)
/// as the device ID.
@property (nonatomic) BOOL useUUIDAsDeviceId;
/// Specifies if the SDK should automatically recognize and forward universal links to the
/// system methods (default: <code>false</code>).
/// When enabled, the SDK will automatically forward universal links to the system methods
/// defined in <a href="https://developer.apple.com/documentation/xcode/supporting-universal-links-in-your-app">Supporting universal links in your app</a>.
/// To correctly recognize universal links, the SDK will look for your application entitlements
/// in two places:
/// note:
/// Universal links is a method for opening your application from an external source
/// (e.g. a website). When Braze processes a click action URL from a campaign, the application
/// is already opened and the default system methods are not called automatically.
/// This setting will default to true in a future SDK major release.
/// <ul>
///   <li>
///     The <code>.entitlements</code> file in your application bundle.
///     <ul>
///       <li>
///         This requires adding the <code>.entitlements</code> file as a resource in your application target.
///       </li>
///       <li>
///         Supports both simulator and device.
///       </li>
///     </ul>
///   </li>
///   <li>
///     The application entitlements embedded in the application binary code signature.
///     <ul>
///       <li>
///         Supports physical devices only. Simulator executables are not signed.
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic) BOOL forwardUniversalLinks;
/// Specifies if a user’s notification subscription state should automatically be set to <code>optedIn</code>
/// when push permissions are authorized (default: <code>true</code>).
/// When enabled, the user’s state will change to <code>optedIn</code> after accepting the push permissions prompt
/// or when manually switching from denied to authorized in the device settings. Under this condition,
/// the notification subscription state can be manually overridden by calling <code>set(pushNotificationSubscriptionState:)</code>
/// but will be changed back to <code>optedIn</code> if either of the above scenarios occur.
@property (nonatomic) BOOL optInWhenPushAuthorized;
/// The size limit for the persisted data (<em>tvOS only</em>, default: 128 KiB).
/// The SDK persistence for tvOS apps relies on <a href="https://archive.ph/0fhgU">UserDefaults</a>. tvOS apps user defaults must
/// remain under <a href="https://archive.ph/29PDV">1 MiB</a>, otherwise they are terminated by the system.
/// The SDK ensure that no more than <code>persistedSizeLimit</code> is stored in the user defaults. Past
/// that limit, the SDK will not persist data and will remain fully functional for the session.
/// Campaign assets are downloaded to cache directories and are not limited by
/// <code>persistedSizeLimit</code>.
/// The default value is set to 128 KiB which is enough to persist a large amount of campaigns
/// and events.
@property (nonatomic) uint64_t tvOSPersistedSizeLimit;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull ephemeralEvents;
/// Creates a Braze SDK configuration object.
/// A configuration is used with <code>Braze/init(configuration:)</code> to customize the SDK behavior.
/// The api key and endpoint are available on the Braze dashboard, in the application setting
/// page.
/// <h2>Usage</h2>
/// \code
/// // Create configuration
/// var configuration = Configuration(apiKey: "BRAZE API KEY", endpoint: "BRAZE ENDPOINT")
///
/// // Customize other settings
/// configuration.sessionTimeout = 5
/// configuration.triggerMinimumTimeInterval = 15
///
/// // Create Braze instance using configuration
/// let braze = Braze(configuration: configuration)
///
/// \endcode\param apiKey The Braze api key.
///
/// \param endpoint The Braze endpoint.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey endpoint:(NSString * _Nonnull)endpoint OBJC_DESIGNATED_INITIALIZER;
/// Creates a Braze SDK configuration object with no default parameters.
/// important:
/// When using this initializer, you <em>must</em> set the API key and endpoint prior
/// to creating the <code>braze</code> instance
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end


/// An opaque object enabling the cancellation of an SDK operation.
/// The cancellable:
/// <ul>
///   <li>
///     Cancels the operation when deinitialized
///   </li>
///   <li>
///     Cancels the operation when <code>cancel()</code> is called
///   </li>
/// </ul>
/// You must keep a strong reference to the cancellable to keep the SDK operation active.
SWIFT_CLASS_NAMED("Cancellable")
@interface BRZCancellable : NSObject
/// Cancels the SDK operation.
- (void)cancel;
/// An empty cancellable that performs nothing when cancelled (no-op).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZCancellable * _Nonnull empty;)
+ (BRZCancellable * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;
@class NSCoder;

SWIFT_CLASS_NAMED("WebViewController")
@interface BRZWebViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic) BOOL animateDismissal;
@property (nonatomic, copy) void (^ _Nullable systemOpenURL)(NSURL * _Nonnull);
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// See <code>deviceId</code>.
- (void)deviceIdOnQueue:(dispatch_queue_t _Nonnull)queue completion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("", "deviceId");
/// See <code>deviceId</code>.
- (void)deviceIdWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("", "deviceId");
@end



@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// See <code>Braze/Resources/acknowledgments</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSURL *> * _Nonnull acknowledgments SWIFT_DEPRECATED_MSG("", "Braze.Resources.acknowledgments");)
+ (NSDictionary<NSString *, NSURL *> * _Nonnull)acknowledgments SWIFT_WARN_UNUSED_RESULT;
+ (void)setAcknowledgments:(NSDictionary<NSString *, NSURL *> * _Nonnull)value;
/// See <code>Braze/Resources/license</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSURL * _Nullable license SWIFT_DEPRECATED_MSG("", "Braze.Resources.license");)
+ (NSURL * _Nullable)license SWIFT_WARN_UNUSED_RESULT;
+ (void)setLicense:(NSURL * _Nullable)value;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// Provided for compatibility purposes.
- (void)_requestEnableSDKOnNextAppRun;
/// Provided for compatibility purposes.
+ (NSString * _Nonnull)_localize:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Provided for compatibility purposes.
- (void)_contentCardsApplyLocalCards;
/// Provided for compatibility purposes.
- (void)_newsFeedApplyLocalCards;
@end

@protocol BrazeDelegate;
@protocol BrazeInAppMessagePresenter;

@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// Delegate for <code>Braze</code> instance.
/// The delegate can optionally react to the Braze SDK lifecycle changes (e.g. SDK opening an URL,
/// presenting a web view, etc.).
@property (nonatomic, strong) id <BrazeDelegate> _Nullable delegate;
/// The presenter used for in-app messages.
/// Set it to an instance of <code>BrazeUI/BrazeInAppMessageUI</code> or any type conforming to the
/// <code>BrazeInAppMessagePresenter</code> protocol.
/// The Braze instance keeps a strong reference to the presenter.
/// \code
/// // Use the default Braze UI (requires the BrazeUI module)
/// braze.inAppMessagePresenter = BrazeInAppMessageUI()
///
/// \endcode
@property (nonatomic, strong) id <BrazeInAppMessagePresenter> _Nullable inAppMessagePresenter;
/// Updates the tracking property allow list with properties to add or remove.
/// Passing no parameters to this method will result in a no-op.
/// <h2>Objective-C</h2>
/// In Objective-C, pass a set of <code>BRZTrackingProperty</code> instead:
/// \code
/// [self.braze updateTrackingAllowListAdding:[NSSet setWithArray:@[BRZTrackingProperty.firstName,
///                                                                 BRZTrackingProperty.lastName]]
///                                  removing:nil];
///
/// \endcode\param adding Properties to be added for tracking.
///
/// \param removing Properties to be removed from tracking.
///
- (void)updateTrackingAllowListAdding:(NSSet<BRZTrackingProperty *> * _Nullable)adding removing:(NSSet<BRZTrackingProperty *> * _Nullable)removing;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// Reports that the current user performed a custom event.
/// \param name The identifier for the event to track.
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
///   <li>
///     Not starting with <code>$</code>
///   </li>
/// </ul>
///
- (void)logCustomEvent:(NSString * _Nonnull)name;
/// Reports that the current user performed a custom event.
/// \param name The identifier for the event to track.
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
///   <li>
///     Not starting with <code>$</code>
///   </li>
/// </ul>
///
/// \param properties Dictionary of properties for this event.
/// <ul>
///   <li>
///     Max 50KB
///   </li>
///   <li>
///     Keys:
///     <ul>
///       <li>
///         Max 255 characters
///       </li>
///       <li>
///         Not starting with <code>$</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     Values:
///     <ul>
///       <li>
///         Int
///       </li>
///       <li>
///         Double
///       </li>
///       <li>
///         String
///       </li>
///       <li>
///         Bool
///       </li>
///       <li>
///         Date
///       </li>
///       <li>
///         Dictionary (rules apply recursively)
///       </li>
///       <li>
///         Array (rules apply recursively)
///       </li>
///     </ul>
///   </li>
/// </ul>
///
- (void)logCustomEvent:(NSString * _Nonnull)name properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Reports that the current user made an in-app purchase, useful for tracking and segmenting
/// users.
/// \param productId A string identifier for the product purchased (e.g. a SKU).
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
/// </ul>
///
/// \param currency The ISO 4217 currency code (e.g. USD, EUR, etc.)
///
/// \param price The price paid. Base units depend on the currency. As an example, USD should be
/// reported as <code>dollars.cents</code>, whereas JPY should be reported as a whole number of Yen. All
/// provided values are rounded to two digits.
///
- (void)logPurchase:(NSString * _Nonnull)productId currency:(NSString * _Nonnull)currency price:(double)price;
/// Reports that the current user made an in-app purchase, useful for tracking and segmenting
/// users.
/// \param productId A string identifier for the product purchased (e.g. a SKU).
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
/// </ul>
///
/// \param currency The ISO 4217 currency code (e.g. USD, EUR, etc.)
///
/// \param price The price paid. Base units depend on the currency. As an example, USD should be
/// reported as <code>dollars.cents</code>, whereas JPY should be reported as a whole number of Yen. All
/// provided values are rounded to two digits.
///
/// \param quantity The quantity of items purchased expressed as a whole number. Must be at least
/// <code>1</code> and at most <code>100</code> (default: <code>1</code>).
///
- (void)logPurchase:(NSString * _Nonnull)productId currency:(NSString * _Nonnull)currency price:(double)price quantity:(NSInteger)quantity;
/// Reports that the current user made an in-app purchase, useful for tracking and segmenting
/// users.
/// \param productId A string identifier for the product purchased (e.g. a SKU).
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
/// </ul>
///
/// \param currency The ISO 4217 currency code (e.g. USD, EUR, etc.)
///
/// \param price The price paid. Base units depend on the currency. As an example, USD should be
/// reported as <code>dollars.cents</code>, whereas JPY should be reported as a whole number of Yen. All
/// provided values are rounded to two digits.
///
/// \param properties Dictionary of properties for this event.
/// <ul>
///   <li>
///     Max 50KB
///   </li>
///   <li>
///     Keys:
///     <ul>
///       <li>
///         Max 255 characters
///       </li>
///       <li>
///         Not starting with <code>$</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     Values:
///     <ul>
///       <li>
///         Int
///       </li>
///       <li>
///         Double
///       </li>
///       <li>
///         String
///       </li>
///       <li>
///         Bool
///       </li>
///       <li>
///         Date
///       </li>
///       <li>
///         Dictionary (rules apply recursively)
///       </li>
///       <li>
///         Array (rules apply recursively)
///       </li>
///     </ul>
///   </li>
/// </ul>
///
- (void)logPurchase:(NSString * _Nonnull)productId currency:(NSString * _Nonnull)currency price:(double)price properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Reports that the current user made an in-app purchase, useful for tracking and segmenting
/// users.
/// \param productId A string identifier for the product purchased (e.g. a SKU).
/// <ul>
///   <li>
///     Max 255 characters
///   </li>
/// </ul>
///
/// \param currency The ISO 4217 currency code (e.g. USD, EUR, etc.)
///
/// \param price The price paid. Base units depend on the currency. As an example, USD should be
/// reported as <code>dollars.cents</code>, whereas JPY should be reported as a whole number of Yen. All
/// provided values are rounded to two digits.
///
/// \param quantity The quantity of items purchased expressed as a whole number. Must be at least
/// <code>1</code> and at most <code>100</code> (default: <code>1</code>).
///
/// \param properties Dictionary of properties for this event.
/// <ul>
///   <li>
///     Max 50KB
///   </li>
///   <li>
///     Keys:
///     <ul>
///       <li>
///         Max 255 characters
///       </li>
///       <li>
///         Not starting with <code>$</code>
///       </li>
///     </ul>
///   </li>
///   <li>
///     Values:
///     <ul>
///       <li>
///         Int
///       </li>
///       <li>
///         Double
///       </li>
///       <li>
///         String
///       </li>
///       <li>
///         Bool
///       </li>
///       <li>
///         Date
///       </li>
///       <li>
///         Dictionary (rules apply recursively)
///       </li>
///       <li>
///         Array (rules apply recursively)
///       </li>
///     </ul>
///   </li>
/// </ul>
///
- (void)logPurchase:(NSString * _Nonnull)productId currency:(NSString * _Nonnull)currency price:(double)price quantity:(NSInteger)quantity properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Change the current identified Braze user.
/// When a user first uses Braze on a device, they are considered “anonymous”. Use this method to
/// identify a user with a unique ID, which enables the following:
/// <ul>
///   <li>
///     If the same user is identified on another device, their user profile, usage history and event history
///     will be shared across devices.
///   </li>
///   <li>
///     If your app is used on the same device by multiple people, you can assign each of them a unique
///     identifier to track them separately. Only the most recent user on a particular device will receive
///     push notifications and in-app messages.
///   </li>
/// </ul>
/// When you request a user switch (which is any call to <code>changeUser</code> where the new user ID is not the same
/// as the existing user ID), the current session for the previous user (anonymous or not) is automatically
/// ended and a new session is started. Similarly, following a call to <code>changeUser</code>, any events which fire are
/// guaranteed to be for the new user. If an in-flight server request completes for the old user after the
/// user switch, no events will fire, so you do not need to worry about filtering out events from Braze for old users.
/// Additionally, if you identify a user which has never been identified on another device, the entire history of that
/// user as an “anonymous” user on this device will be preserved and associated with the newly identified user.
/// However, if you identify a user which has been identified in another device, any history which was already
/// flushed to the server for the anonymous user on this device will be merged into the identified user.
/// (See: <a href="https://www.braze.com/docs/api/endpoints/user_data/post_users_merge#merge_updates-behavior">List of merge fields</a>)
/// Note: Once you identify a user, you cannot revert to the “anonymous” user. The transition from anonymous
/// to identified tracking is only allowed <em>once</em> because the initial anonymous user receives special treatment to
/// allow for preservation of their history. As a result, we recommend against changing the user ID just because
/// your app has entered a “logged out” state because it makes you unable to target the previously logged out
/// user with re-engagement campaigns. If you anticipate multiple users on the same device, but only want to
/// target one of them when your app is in a logged out state, we recommend separately keeping track of the
/// user ID you want to target while logged out and switching back to that user ID as part of your app’s logout process.
/// Note that the current user’s information and ID can be retrieved at any time via the <code>BrazeKit/Braze/user-swift.property</code> module.
/// \param userId The new user identifier.
///
- (void)changeUser:(NSString * _Nonnull)userId;
/// Change the current identified Braze user.
/// When a user first uses Braze on a device, they are considered “anonymous”. Use this method to
/// identify a user with a unique ID, which enables the following:
/// <ul>
///   <li>
///     If the same user is identified on another device, their user profile, usage history and event history
///     will be shared across devices.
///   </li>
///   <li>
///     If your app is used on the same device by multiple people, you can assign each of them a unique
///     identifier to track them separately. Only the most recent user on a particular device will receive
///     push notifications and in-app messages.
///   </li>
/// </ul>
/// When you request a user switch (which is any call to <code>changeUser</code> where the new user ID is not the same
/// as the existing user ID), the current session for the previous user (anonymous or not) is automatically
/// ended and a new session is started. Similarly, following a call to <code>changeUser</code>, any events which fire are
/// guaranteed to be for the new user. If an in-flight server request completes for the old user after the
/// user switch, no events will fire, so you do not need to worry about filtering out events from Braze for old users.
/// Additionally, if you identify a user which has never been identified on another device, the entire history of that
/// user as an “anonymous” user on this device will be preserved and associated with the newly identified user.
/// However, if you identify a user which has been identified in another device, any history which was already
/// flushed to the server for the anonymous user on this device will be merged into the identified user.
/// (See: <a href="https://www.braze.com/docs/api/endpoints/user_data/post_users_merge#merge_updates-behavior">List of merge fields</a>)
/// Note: Once you identify a user, you cannot revert to the “anonymous” user. The transition from anonymous
/// to identified tracking is only allowed <em>once</em> because the initial anonymous user receives special treatment to
/// allow for preservation of their history. As a result, we recommend against changing the user ID just because
/// your app has entered a “logged out” state because it makes you unable to target the previously logged out
/// user with re-engagement campaigns. If you anticipate multiple users on the same device, but only want to
/// target one of them when your app is in a logged out state, we recommend separately keeping track of the
/// user ID you want to target while logged out and switching back to that user ID as part of your app’s logout process.
/// Note that the current user’s information and ID can be retrieved at any time via the <code>BrazeKit/Braze/user-swift.property</code> module.
/// \param userId The new user identifier.
///
/// \param sdkAuthSignature The optional user SDK authentication signature.
///
- (void)changeUser:(NSString * _Nonnull)userId sdkAuthSignature:(NSString * _Nullable)sdkAuthSignature;
/// Requests geofences at a specific location.
/// \param latitude The latitude (value between <code>-90</code> and <code>90</code>)
///
/// \param longitude The longitude (value between <code>-180</code> and <code>180</code>)
///
- (void)requestGeofencesWithLatitude:(double)latitude longitude:(double)longitude;
@end


@interface Braze (SWIFT_EXTENSION(BrazeKit))
/// Sets the signature to be used to authenticate the current user.
/// You can also set the signature when calling
/// <code>changeUser(userId:sdkAuthSignature:fileID:line:)</code>.
/// This signature will only have an effect if
/// <code>Configuration-swift.class/Api-swift.class/sdkAuthentication</code> set to true.
/// \param signature The SDK authentication signature.
///
- (void)setSDKAuthenticationSignature:(NSString * _Nonnull)signature;
/// Immediately flush pending SDK data to Braze’s servers.
/// By default, data logged to Braze through the SDK is queued locally and sent to Braze’s servers
/// asynchronously on a regular interval
/// (<code>Configuration-swift.class/Api-swift.class/flushInterval</code>).
- (void)requestImmediateDataFlush;
/// Deletes all locally stored SDK data and sets <code>enabled</code> to <code>false</code>.
- (void)wipeData;
/// Tracks the identifier for vendor (<a href="https://apple.co/3rSyyZm">IDFV</a>).
/// \param identifierForVendor The string representation of the identifier for vendor UUID
/// (using <code>uuidString</code>).
///
- (void)setIdentifierForVendor:(NSString * _Nonnull)identifierForVendor;
/// Tracks the identifier for advertiser (<a href="https://apple.co/3BmxFey">IDFA</a>).
/// The identifier for advertiser can be retrieved using the <a href="https://apple.co/3LM7mm2">App Tracking Transparency</a> and
/// <a href="https://apple.co/3uUZlnS">AdSupport</a> frameworks.
/// The Braze SDK does not track this identifer automatically and does not call or reference the
/// <a href="https://apple.co/3LM7mm2">App Tracking Transparency</a> framework (data-tracking authorization) nor the <a href="https://apple.co/3uUZlnS">AdSupport</a>
/// framework (identifier).
/// \param identifierForAdvertiser The string representation of the identifier for
/// advertiser UUID (using <code>uuidString</code>).
///
- (void)setIdentifierForAdvertiser:(NSString * _Nonnull)identifierForAdvertiser;
/// Tracks advertisement tracking state.
/// The advertisement tracking state can be retrieved using the <a href="https://apple.co/3LM7mm2">App Tracking Transparency</a>
/// framework.
/// The Braze SDK does not track this state automatically and does not call or reference the
/// <a href="https://apple.co/3LM7mm2">App Tracking Transparency</a> framework (data-tracking authorization) nor the <a href="https://apple.co/3uUZlnS">AdSupport</a>
/// framework (identifier).
/// \param adTrackingEnabled The advertisement tracking state as reported by the system’s
/// data privacy APIs.
///
- (void)setAdTrackingEnabled:(BOOL)adTrackingEnabled;
@end


/// Conform to this protocol to ensure that Braze’s <code>Braze/UIUtils</code> helper methods properly ignore
/// the window presenting the in-app messages.
SWIFT_PROTOCOL("_TtP8BrazeKit27BrazeInAppMessageWindowType_")
@protocol BrazeInAppMessageWindowType
@end


/// Delegate to handle SDK Authentication.
SWIFT_PROTOCOL("_TtP8BrazeKit20BrazeSDKAuthDelegate_")
@protocol BrazeSDKAuthDelegate
/// Notify the delegate that Braze was unable to authenticate the current user with the Braze api.
/// Authentication can fail because of an expired or invalid signature.
/// You are responsible for providing the Braze SDK a valid signature when this delegate method is
/// called.
/// SDK requests will retry periodically using an exponential backoff approach. After 50
/// consecutive failed attempts, retries will be paused until the next session start.
/// \param braze The braze instance.
///
/// \param error The authentication error.
///
- (void)braze:(Braze * _Nonnull)braze sdkAuthenticationFailedWithError:(BRZSDKAuthenticationError * _Nonnull)error;
@end


/// The message button type.
SWIFT_CLASS_NAMED("Button")
@interface BRZInAppMessageRawButton : NSObject
/// The button identifier.
@property (nonatomic) NSInteger identifier;
/// The button text.
@property (nonatomic, copy) NSString * _Nonnull text;
/// The button redirect URL.
@property (nonatomic, copy) NSURL * _Nullable url;
/// Specifies whether the button should redirect to the URL using a web view.
@property (nonatomic) BOOL useWebView;
/// The button text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull textColor;
/// The button background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull backgroundColor;
/// The button border color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull borderColor;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum BRZInAppMessageRawClickAction : NSInteger;

@interface BRZInAppMessageRawButton (SWIFT_EXTENSION(BrazeKit))
/// The button click action.
@property (nonatomic) enum BRZInAppMessageRawClickAction clickAction;
/// Creates and returns a raw In-App Message button.
/// \param id The button identifier.
///
/// \param text The button text.
///
/// \param clickAction The button click action.
///
/// \param url The button redirect URL.
///
/// \param useWebView Specifies whether the button should redirect to the URL using a web view.
///
- (nonnull instancetype)initWithId:(NSInteger)id text:(NSString * _Nonnull)text clickAction:(enum BRZInAppMessageRawClickAction)clickAction url:(NSURL * _Nullable)url useWebView:(BOOL)useWebView;
/// Creates and returns a raw In-App Message button.
/// \param id The button identifier.
///
/// \param text The button text.
///
/// \param clickAction The button click action.
///
/// \param url The button redirect URL.
///
/// \param useWebView Specifies whether the button should redirect to the URL using a web view.
///
/// \param textColor The button text color.
///
/// \param backgroundColor The button background color.
///
/// \param borderColor The button border color.
///
- (nonnull instancetype)initWithId:(NSInteger)id text:(NSString * _Nonnull)text clickAction:(enum BRZInAppMessageRawClickAction)clickAction url:(NSURL * _Nullable)url useWebView:(BOOL)useWebView textColor:(BRZInAppMessageRawColor * _Nonnull)textColor backgroundColor:(BRZInAppMessageRawColor * _Nonnull)backgroundColor borderColor:(BRZInAppMessageRawColor * _Nonnull)borderColor;
@end


SWIFT_CLASS_NAMED("Color")
@interface BRZInAppMessageRawColor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class UIColor;

@interface BRZInAppMessageRawColor (SWIFT_EXTENSION(BrazeKit))
/// The <code>UIColor</code> representation of the in-app message color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull uiColor;
/// Creates and returns an in-app message color from a <code>UIColor</code>.
/// \param color The <code>UIColor</code> to convert.
///
- (nonnull instancetype)init:(UIColor * _Nonnull)color;
@end


@interface BRZConfiguration (SWIFT_EXTENSION(BrazeKit))
@end




@interface BRZConfiguration (SWIFT_EXTENSION(BrazeKit))
@end


/// Location configuration.
SWIFT_CLASS_NAMED("Location")
@interface BRZConfigurationLocation : NSObject
/// Automatically collect the user location at session start (default: <code>false</code>).
/// The Braze SDK never attempts to collect the user location when unauthorized by the system.
/// Your application is responsible to request the appropriate location permission.
/// Use <code>Braze/User-swift.class/setLastKnownLocation(latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:fileID:line:)</code>
/// to manually attribute a location to a user.
@property (nonatomic) BOOL automaticLocationCollection;
/// Enables geofence monitoring (default: <code>false</code>).
/// Geofence monitoring requires either:
/// <ul>
///   <li>
///     The permission <code>.authorizedAlways</code>.
///   </li>
///   <li>
///     The permission <code>.authorizedWhenInUse</code> with the <em>Background Mode -> Location updates</em>
///     capability enabled.
///   </li>
/// </ul>
/// See <a href="https://apple.co/40hO1Bb">Handling location updates in the background</a>
/// note:
/// Geofences monitoring is not available on tvOS and visionOS. Setting this value to
/// <code>true</code> has no effect on these platforms.
@property (nonatomic) BOOL geofencesEnabled;
/// Automatically requests geofences for the device last known position (default: <code>false</code>).
/// When set to <code>false</code>, use <code>Braze/requestGeofences(latitude:longitude:fileID:line:)</code> to
/// manually request geofences.
/// note:
/// Geofences monitoring is not available on tvOS and visionOS. Setting this value to
/// <code>true</code> has no effect on these platforms.
@property (nonatomic) BOOL automaticGeofenceRequests;
/// Enables the location manager to update geofences while in the background.
/// When enabling this setting, configure a higher <code>distanceFilter</code> value to minimize battery usage.
/// important:
/// When enabled, ensure that you have the <em>Location updates</em> background mode enabled in your app’s entitlements.
@property (nonatomic) BOOL allowBackgroundGeofenceUpdates;
/// The number of meters required to trigger a location update in the background (default: <code>1600</code>).
/// This value only takes effect when <code>allowBackgroundGeofenceUpdates</code> is enabled. The minimum valid value is <code>800</code>.
@property (nonatomic) double distanceFilter;
/// The BrazeLocationProvider dependency (default: <code>nil</code>).
/// Set this value to an instance of <code>BrazeLocation/BrazeLocationProvider</code> to use any of the
/// SDK location feature.
@property (nonatomic, strong) id _Nullable brazeLocationProvider;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface BRZConfiguration (SWIFT_EXTENSION(BrazeKit))
@end

enum BRZLoggerLevel : uint8_t;

/// Logger configuration.
SWIFT_CLASS_NAMED("Logger")
@interface BRZConfigurationLogger : NSObject
/// The minimum logging level (default: <code>.error</code>).
/// See <code>Braze/Configuration-swift.class/Logger-swift.class/Level-swift.enum</code> for possible
/// values.
@property (nonatomic) enum BRZLoggerLevel level;
/// Flag specifying whether signposts should be emitted by the Braze SDK (default: <code>false</code>).
/// Signposts are not emitted on iOS versions prior to 13.0.
@property (nonatomic) BOOL signposts;
/// The print function to use for logging (default: <code>nil</code>, uses the Braze internal logging.
/// function).
/// Takes a string to print and a logging <code>Level</code>.
/// Returns <code>true</code> to print using the Braze internal logging function, <code>false</code> to prevent default logging.
@property (nonatomic, copy) BOOL (^ _Nullable print)(NSString * _Nonnull, enum BRZLoggerLevel);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BRZConfiguration (SWIFT_EXTENSION(BrazeKit))
@end

@class BRZConfigurationPushAutomation;

/// Push configuration.
SWIFT_CLASS_NAMED("Push")
@interface BRZConfigurationPush : NSObject
/// The app group used to communicate with push extensions (default: <code>nil</code>).
@property (nonatomic, copy) NSString * _Nullable appGroup;
/// The automatic push notification handling behavior (default: disabled).
/// important:
/// The SDK must be initialized on the main thread to enable push notification
/// automation. SDK initialization must happen before the application has finished launching
/// or in your AppDelegate <a href="https://archive.is/nUG1k"><code>application(_:didFinishLaunchingWithOptions:)</code></a> implementation.
/// note:
/// The automation steps performed by the SDK are compatible with pre-existing push
/// notification handling integrations in your codebase. The SDK only automates the
/// processing of remote notification received from Braze. Any system handler implemented
/// to process your own or another third party SDK remote notifications will continue to
/// work when <code>automation</code> is enabled.
/// By default, the SDK does not perform any automation steps and you are required to implement
/// the <code>UIApplicationDelegate</code> and <code>UNUserNotificationCenterDelegate</code> methods yourself as
/// described in the <a href="doc:b1-standard-push-notifications">doc:b1-standard-push-notifications</a> tutorial.
/// You can enable automatic push notification handling as follows:
/// \code
/// configuration.push.automation = true
///
/// \endcodeThis instructs the SDK to:
/// <ul>
///   <li>
///     Register your application for push notification on the system.
///   </li>
///   <li>
///     Request the push notification authorization / permission at initialization.
///   </li>
///   <li>
///     Dynamically provide implementations for the push notification related system delegate
///     methods.
///   </li>
/// </ul>
/// For a more granular behavior, each automation step can be enabled individually:
/// \code
/// // Automate only the `application(_:didRegisterForRemoteNotificationsWithDeviceToken:)`
/// // delegate method
/// configuration.push.automation.registerDeviceToken = true
///
/// \endcodeOr you can perform a combination of both approaches:
/// \code
/// // Enable all automations
/// configuration.push.automation = true
/// // Disable the automatic notification authorization request at launch.
/// configuration.push.automation.requestAuthorizationAtLaunch = false
///
/// \endcodeimportant:
/// When enabled, the <code>UIApplicationDelegate</code> and
/// <code>UNUserNotificationCenterDelegate</code> methods will not be executed when processing remote
/// notifications received from Braze.
/// Use <code>BrazeKit/Braze/Notifications-swift.class/subscribeToUpdates(_:)</code> to subscribe to
/// those push notification updates when <code>automation</code> is enabled.
/// The behavior of each automation step is described in
/// <code>BrazeKit/Braze/Configuration-swift.class/Push-swift.class/Automation-swift.class</code>.
@property (nonatomic, strong) BRZConfigurationPushAutomation * _Nonnull automation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BRZDeviceProperty;

@interface BRZConfiguration (SWIFT_EXTENSION(BrazeKit))
/// The device properties automatically collected by the SDK (default: all
/// <code>Braze/Configuration-swift.class/DeviceProperty</code> cases).
/// Assign an empty set (<code>[]</code>) to this value to prevent all device properties to being sent to
/// Braze’s servers.
/// important:
/// Removing some device properties can disable SDK features, see
/// <code>Braze/Configuration-swift.class/DeviceProperty</code> for details.
/// <h2>Objective-C</h2>
/// In Objective-C, pass an array of <code>BRZDeviceProperty</code> keys instead:
/// \code
/// configuration.devicePropertyAllowList = @[
///   BRZDeviceProperty.timeZone,
///   BRZDeviceProperty.model
/// ];
///
/// \endcode
@property (nonatomic, copy) NSArray<BRZDeviceProperty *> * _Nonnull devicePropertyAllowList;
@end


/// The type of device property that can be collected by the SDK.
/// See <code>Braze/Configuration-swift.struct/devicePropertyAllowList</code> for usage.
SWIFT_CLASS_NAMED("_OBJC_BRZDeviceProperty")
@interface BRZDeviceProperty : NSObject
/// The device model.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull model;)
+ (BRZDeviceProperty * _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
/// The device os version.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull osVersion;)
+ (BRZDeviceProperty * _Nonnull)osVersion SWIFT_WARN_UNUSED_RESULT;
/// The device main screen resolution.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull resolution;)
+ (BRZDeviceProperty * _Nonnull)resolution SWIFT_WARN_UNUSED_RESULT;
/// The device time zone.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull timeZone;)
+ (BRZDeviceProperty * _Nonnull)timeZone SWIFT_WARN_UNUSED_RESULT;
/// The device locale.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull locale;)
+ (BRZDeviceProperty * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// The device phone carrier.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull carrier;)
+ (BRZDeviceProperty * _Nonnull)carrier SWIFT_WARN_UNUSED_RESULT;
/// The push enabled state.
/// important:
/// Failure to collect this device property may prevent the device from receiving
/// push notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull pushEnabled;)
+ (BRZDeviceProperty * _Nonnull)pushEnabled SWIFT_WARN_UNUSED_RESULT;
/// The push authorization status.
/// important:
/// Failure to collect this device property may prevent the device from receiving
/// push notifications.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull pushAuthStatus;)
+ (BRZDeviceProperty * _Nonnull)pushAuthStatus SWIFT_WARN_UNUSED_RESULT;
/// The push display options.
/// important:
/// Push display options are no longer supported. Providing this value has no
/// effect.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZDeviceProperty * _Nonnull pushDisplayOptions SWIFT_DEPRECATED_MSG("Push display options are no longer supported. Providing this value will have no effect.");)
+ (BRZDeviceProperty * _Nonnull)pushDisplayOptions SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BRZContentCardRaw (SWIFT_EXTENSION(BrazeKit))
@end

/// The Content Card types supported by the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZContentCardRawType, "_OBJC_BRZContentCardRawType", open) {
/// The Classic card type.
  BRZContentCardRawTypeClassic = 0,
/// The ImageOnly card type.
  BRZContentCardRawTypeImageOnly = 1,
/// The Captioned Image card type.
  BRZContentCardRawTypeCaptionedImage = 2,
/// The Control card type.
  BRZContentCardRawTypeControl = 3,
};



@interface BRZContentCardRaw (SWIFT_EXTENSION(BrazeKit))
@end


/// The Context provides methods to log card analytics, process click actions and other utilities.
SWIFT_CLASS_NAMED("Context")
@interface BRZContentCardContext : NSObject
/// Logs the content card impression event.
- (void)logImpression;
/// Logs the content card click event.
- (void)logClick;
/// Processes the click action.
/// \param url The content card url.
///
/// \param useWebView Specifies whether <code>url</code> should be openend in a web view.
///
- (void)processClickActionWithURL:(NSURL * _Nonnull)url useWebView:(BOOL)useWebView;
/// Logs the content card dismissed event.
- (void)logDismissed;
/// Logs an error related to the content card.
/// \param error The error.
///
- (void)logError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BRZContentCardRaw (SWIFT_EXTENSION(BrazeKit))
/// Logs a content card impression using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/ContentCardRaw/Context-swift.class/logImpression()</code> instead.
/// \param braze The Braze instance.
///
- (void)logImpressionUsing:(Braze * _Nonnull)braze;
/// Logs a content card click using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/ContentCardRaw/Context-swift.class/logClick()</code> instead.
/// \param braze The Braze instance.
///
- (void)logClickUsing:(Braze * _Nonnull)braze;
/// Logs a content card dismissal using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/ContentCardRaw/Context-swift.class/logDismissed()</code> instead.
/// \param braze The Braze instance.
///
- (void)logDismissedUsing:(Braze * _Nonnull)braze;
@end


@interface BRZContentCardRaw (SWIFT_EXTENSION(BrazeKit))
/// The card type (default: <code>.classic</code>).
@property (nonatomic) enum BRZContentCardRawType type;
/// The card image aspect ratio (default: <code>1</code>).
@property (nonatomic) double imageAspectRatio;
@end



@interface BRZContentCards (SWIFT_EXTENSION(BrazeKit))
/// The content cards for the current user.
@property (nonatomic, readonly, copy) NSArray<BRZContentCardRaw *> * _Nonnull cards;
/// The unviewed content cards for the current user.
@property (nonatomic, readonly, copy) NSArray<BRZContentCardRaw *> * _Nonnull unviewedCards;
/// Requests an immediate refresh of content cards from Braze servers.
/// By default, content cards are refreshed when a new session starts.
- (void)requestRefresh;
/// Requests an immediate refresh of content cards from Braze servers.
/// By default, content cards are refreshed when a new session starts.
/// \param completion The completion handler executed on the main thread with the result
/// of the refresh operation.
///
- (void)requestRefreshWithCompletion:(void (^ _Nonnull)(NSArray<BRZContentCardRaw *> * _Nullable, NSError * _Nullable))completion;
/// Subscribes to content cards updates.
/// \param update The update handler executed on the main thread with the latest content
/// cards
///
///
/// returns:
/// A cancellable. You must keep a strong reference to the cancellable to keep the
/// subscription active. The subscription is automatically cancelled when the
/// cancellable is deinitialized. Alternatively, you can call
/// <code>Braze/Cancellable/cancel()</code> to cancel the subscription.
- (BRZCancellable * _Nonnull)subscribeToUpdates:(void (^ _Nonnull)(NSArray<BRZContentCardRaw *> * _Nonnull))update SWIFT_WARN_UNUSED_RESULT;
@end


@interface BRZContentCardContext (SWIFT_EXTENSION(BrazeKit))
/// Creates and returns a Content Card context.
/// Each of the provided implementation may be called by the Braze Content Card UI during the
/// presentation lifecycle.
/// \param logImpression The log impression implementation.
///
/// \param logClick The log click implementation.
///
/// \param processClickAction The process click action implementation.
///
/// \param logDismissed The log dismissed implementation.
///
/// \param logError The log error implementation.
///
/// \param loadImage The load image implementation, set it to <code>nil</code> if the content card does not
/// have an image.
///
- (nonnull instancetype)initWithLogImpression:(void (^ _Nonnull)(void))logImpression logClick:(void (^ _Nonnull)(void))logClick processClickAction:(void (^ _Nonnull)(NSURL * _Nonnull, BOOL))processClickAction logDismissed:(void (^ _Nonnull)(void))logDismissed logError:(void (^ _Nonnull)(NSError * _Nonnull))logError loadImage:(BRZCancellable * _Nonnull (^ _Nullable)(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable)))loadImage;
/// Creates and returns a Content Card context with a default implementation.
/// Use <code>Braze/ContentCardRaw/Context-swift.class/init(logImpression:logClick:processClickAction:logDismissed:logError:loadImage:)-2gmga</code>
/// to customize the implementation.
/// \param cardRaw The relevant raw content card.
///
/// \param braze The Braze instance.
///
///
/// returns:
///
/// <ul>
///   <li>
///     A valid Content Card context or nil if it failed to decode.
///   </li>
/// </ul>
- (nullable instancetype)initWithCardRaw:(BRZContentCardRaw * _Nonnull)cardRaw using:(Braze * _Nonnull)braze;
/// Loads the content card image.
/// This calls its completion handler directly with an error when the content card does not have
/// an image.
/// \param completion The completion closure executed on the main thread with the result
/// of the load operation.
///
///
/// returns:
/// A cancellable that must be retained for the duration of the load operation.
- (BRZCancellable * _Nonnull)loadImageWithCompletion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end


/// The Context provides methods to log message analytics, process click actions and other
/// utilities.
SWIFT_CLASS_NAMED("Context")
@interface BRZInAppMessageContext : NSObject
/// Indicates whether the context is valid, meaning that it hasn’t been used yet and is ready to
/// be used for presenting an in-app message.
@property (nonatomic, readonly) BOOL valid;
/// The Braze instance associated with the in-app message.
@property (nonatomic, readonly) id _Nullable braze;
/// Logs the in-app message impression event.
- (void)logImpression;
/// Logs an error related to the in-app message.
/// \param error The error.
///
- (void)logError:(NSError * _Nonnull)error;
/// Logs an error related to the in-app message.
/// \param error The error.
///
- (void)logErrorFlattened:(NSString * _Nonnull)error;
/// Discards the context.
- (void)discard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BRZInAppMessageContext (SWIFT_EXTENSION(BrazeKit))
/// Creates and returns an In-App Message context.
/// Each of the provided implementation may be called by the Braze In-App Message UI during the
/// presentation lifecycle.
/// \param logImpression The log impression implementation.
///
/// \param logClick The log click implementation.
///
/// \param processClickAction The process click action implementation. Accepts an optional target
/// parameter specifying the <code>UIViewController</code> used to present an
/// eventual web view (iOS only).
///
/// \param logError The log error implementation.
///
/// \param braze A closure returning the braze instance associated with the message.
///
/// \param getLocalAssets A closure transforming remote assets URLs into local URLs by placing
/// them in a destination directory (2nd parameter).
///
/// \param withLocalAssets A closure transforming the message with remote assets into a message
/// with local assets. The local assets are placed in a destination
/// directory (2nd parameter).
///
/// \param multipleLogClickEnabled Specify whether the context allows logging multiple click
/// event.
///
- (nonnull instancetype)initWithLogImpression:(void (^ _Nonnull)(void))logImpression logClick:(void (^ _Nonnull)(NSString * _Nullable))logClick processClickAction:(void (^ _Nonnull)(enum BRZInAppMessageRawClickAction, NSURL * _Nullable, id _Nullable))processClickAction logError:(void (^ _Nonnull)(NSError * _Nonnull))logError braze:(id _Nullable (^ _Nonnull)(void))braze getLocalAssets:(BRZCancellable * _Nonnull (^ _Nonnull)(NSArray<NSURL *> * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(NSDictionary<NSURL *, NSURL *> * _Nullable, NSError * _Nullable)))getLocalAssets withLocalAssets:(BRZCancellable * _Nonnull (^ _Nonnull)(BRZInAppMessageRaw * _Nonnull, NSURL * _Nonnull, void (^ _Nonnull)(BRZInAppMessageRaw * _Nullable, NSError * _Nullable)))withLocalAssets multipleLogClickEnabled:(BOOL)multipleLogClickEnabled;
/// Creates and returns an In-App Message context with a default implementation.
/// Use <code>Braze/InAppMessageRaw/Context-swift.class/init(logImpression:logClick:processClickAction:logError:braze:getLocalAssets:withLocalAssets:multipleLogClickEnabled:)-38sun</code>
/// to customize the implementation.
/// \param messageRaw The relevant raw in-app message.
///
/// \param braze The Braze instance.
///
///
/// returns:
///
/// <ul>
///   <li>
///     A valid In-App Message context or nil if it failed to decode.
///   </li>
/// </ul>
- (nullable instancetype)initWithMessageRaw:(BRZInAppMessageRaw * _Nonnull)messageRaw using:(Braze * _Nonnull)braze;
/// Logs the in-app message click event.
- (void)logClick;
/// Logs the in-app message click event.
/// \param buttonId A button identifier.
///
- (void)logClickWithButtonId:(NSString * _Nonnull)buttonId;
/// Processes the click action.
/// \param clickAction The in-app message raw click action.
///
/// \param url The url is applicable.
///
/// \param useWebView Specify whether url should be opened in a web view.
///
- (void)processClickAction:(enum BRZInAppMessageRawClickAction)clickAction url:(NSURL * _Nullable)url useWebView:(BOOL)useWebView;
/// Processes the click action.
/// \param clickAction The in-app message raw click action.
///
/// \param url The url is applicable.
///
/// \param useWebView Specify whether url should be opened in a web view.
///
/// \param target The target <code>UIViewController</code> used to display an eventual web view (iOS only).
/// Set it to <code>nil</code> to let the SDK choose an appropriate view controller.
///
- (void)processClickAction:(enum BRZInAppMessageRawClickAction)clickAction url:(NSURL * _Nullable)url useWebView:(BOOL)useWebView target:(id _Nullable)target;
/// Gets the local assets URLs matching the remote URLs passed as parameter.
/// \param urls The remote URLs.
///
/// \param destinationURL The destination for the local assets.
///
/// \param completionHandler The completion handler providing the result of the operation.
///
///
/// returns:
/// A cancellable. You must keep a strong reference to it to keep the operation
/// active.
- (BRZCancellable * _Nonnull)getLocalAssets:(NSArray<NSURL *> * _Nonnull)urls destinationURL:(NSURL * _Nonnull)destinationURL completionHandler:(void (^ _Nonnull)(NSDictionary<NSURL *, NSURL *> * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Transforms a message with remote assets URLs into one with local assets URLs.
/// \param message The message to transform.
///
/// \param destinationURL The destination for the local assets.
///
/// \param completionHandler The completion handler providing the result of the operation.
///
///
/// returns:
/// A cancellable. You must keep a strong reference to it to keep the operation
/// active.
- (BRZCancellable * _Nonnull)withLocalAssets:(BRZInAppMessageRaw * _Nonnull)message destinationURL:(NSURL * _Nonnull)destinationURL completionHandler:(void (^ _Nonnull)(BRZInAppMessageRaw * _Nullable, NSError * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
@end




@interface BRZFeatureFlag (SWIFT_EXTENSION(BrazeKit))
/// The Feature Flag JSON representation.
- (NSData * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Decodes the JSON into a Feature Flag object.
+ (nullable instancetype)decodingWithJson:(NSData * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;

@interface BRZFeatureFlag (SWIFT_EXTENSION(BrazeKit))
/// The number value for the property at <code>key</code>.
/// Use <code>NSNumber</code>’s <a href="https://developer.apple.com/documentation/foundation/nsnumber/1414104-doublevalue"><code>doubleValue</code></a>
/// property to retrieve the underlying double value.
/// \param key The property key.
///
///
/// returns:
/// The number value if available, <code>nil</code> otherwise.
- (NSNumber * _Nullable)numberPropertyForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The bool value for the property at <code>key</code>.
/// Use <code>NSNumber</code>’s <a href="https://developer.apple.com/documentation/foundation/nsnumber/1410865-boolvalue"><code>boolValue</code></a>
/// property to retrieve the underlying boolean value.
/// \param key The property key.
///
///
/// returns:
/// The bool value if available, <code>nil</code> otherwise.
- (NSNumber * _Nullable)boolPropertyForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface BRZFeatureFlags (SWIFT_EXTENSION(BrazeKit))
/// Requests an immediate refresh of feature flags from Braze servers.
/// By default, feature flags are refreshed when a new session starts.
- (void)requestRefresh;
/// Requests an immediate refresh of feature flags from Braze servers.
/// By default, feature flags are refreshed when a new session starts.
/// \param completion The completion handler executed on the main thread with the result of
/// the refresh operation.
///
- (void)requestRefreshWithCompletion:(void (^ _Nonnull)(NSArray<BRZFeatureFlag *> * _Nullable, NSError * _Nullable))completion;
@end


@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end



@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end



@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end


/// The message button theme type.
SWIFT_CLASS_NAMED("ButtonTheme")
@interface BRZInAppMessageRawButtonTheme : NSObject
/// The default button light theme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZInAppMessageRawButtonTheme * _Nonnull defaultLight;)
+ (BRZInAppMessageRawButtonTheme * _Nonnull)defaultLight SWIFT_WARN_UNUSED_RESULT;
/// The default button dark theme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZInAppMessageRawButtonTheme * _Nonnull defaultDark;)
+ (BRZInAppMessageRawButtonTheme * _Nonnull)defaultDark SWIFT_WARN_UNUSED_RESULT;
/// The button text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull textColor;
/// The button border color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull borderColor;
/// The button background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull backgroundColor;
/// Creates and returns a raw In-App Message button theme.
- (nonnull instancetype)init;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end


/// The message theme type.
SWIFT_CLASS_NAMED("Theme")
@interface BRZInAppMessageRawTheme : NSObject
/// The default message light theme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZInAppMessageRawTheme * _Nonnull defaultLight;)
+ (BRZInAppMessageRawTheme * _Nonnull)defaultLight SWIFT_WARN_UNUSED_RESULT;
/// The default message dark theme.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZInAppMessageRawTheme * _Nonnull defaultDark;)
+ (BRZInAppMessageRawTheme * _Nonnull)defaultDark SWIFT_WARN_UNUSED_RESULT;
/// The background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull backgroundColor;
/// The text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull textColor;
/// The icon color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull iconColor;
/// The icon background color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull iconBackgroundColor;
/// The header text color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull headerTextColor;
/// The close button color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull closeButtonColor;
/// The frame color.
@property (nonatomic, strong) BRZInAppMessageRawColor * _Nonnull frameColor;
/// The buttons themes.
@property (nonatomic, copy) NSArray<BRZInAppMessageRawButtonTheme *> * _Nonnull buttons;
/// Creates and returns a raw In-App Message theme.
- (nonnull instancetype)init;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end



@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
/// Logs an in-app message impression using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/InAppMessageRaw/Context-swift.class/logImpression()</code> instead.
/// \param braze The Braze instance.
///
- (void)logImpressionUsing:(Braze * _Nonnull)braze;
/// Logs an in-app message click using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/InAppMessageRaw/Context-swift.class/logClick(buttonId:)</code> instead.
/// \param buttonId The optional button identifier. The value <code>nil</code> will be processed as a body click.
///
/// \param braze The Braze instance.
///
- (void)logClickWithButtonId:(NSString * _Nullable)buttonId using:(Braze * _Nonnull)braze;
@end


@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
/// Provided for compatibility purposes.
@property (nonatomic) BOOL _compat_hideChevron;
/// Provided for compatibility purposes.
@property (nonatomic) NSInteger _compat_overrideUserInterfaceStyle;
@end



@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
@end

/// The message types supported by the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawType, "_OBJC_BRZInAppMessageRawType", open) {
/// The Slideup message type.
  BRZInAppMessageRawTypeSlideup = 0,
/// The Modal message type.
  BRZInAppMessageRawTypeModal = 1,
/// The Full message type.
  BRZInAppMessageRawTypeFull = 2,
/// The HtmlFull message type.
  BRZInAppMessageRawTypeHtmlFull = 3,
/// The Html message type.
  BRZInAppMessageRawTypeHtml = 4,
};

/// The message click action type.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawClickAction, "_OBJC_BRZInAppMessageRawClickAction", open) {
/// No action.
  BRZInAppMessageRawClickActionNone = 0,
/// Opens the NewsFeed.
  BRZInAppMessageRawClickActionNewsFeed = 1,
/// Opens the URL.
  BRZInAppMessageRawClickActionURL SWIFT_COMPILE_NAME("url") = 2,
};

/// The message close type.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawClose, "_OBJC_BRZInAppMessageRawClose", open) {
/// Automatically closes the message after the message duration.
  BRZInAppMessageRawCloseAutoDismiss = 0,
/// Needs a user interaction to close the message.
  BRZInAppMessageRawCloseSwipe = 1,
};

/// The message supported orientation values.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawOrientation, "_OBJC_BRZInAppMessageRawOrientation", open) {
/// Supports all orientation.
  BRZInAppMessageRawOrientationAny = 0,
/// Only supports portrait orientation.
  BRZInAppMessageRawOrientationPortrait = 1,
/// Only supports landscape orientation.
  BRZInAppMessageRawOrientationLandscape = 2,
};

/// The message label’s text alignment values.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawTextAlignment, "_OBJC_BRZInAppMessageRawTextAlignment", open) {
/// Align the text with the leading edge of the label.
  BRZInAppMessageRawTextAlignmentStart = 0,
/// Align the text with center of the label.
  BRZInAppMessageRawTextAlignmentCenter = 1,
/// Align the text with the trailing edge of the label.
  BRZInAppMessageRawTextAlignmentEnd = 2,
};

/// Specifies how the Modal of Full message needs to display its image.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawImageStyle, "_OBJC_BRZInAppMessageRawImageStyle", open) {
/// The image takes the whole content of the message.
  BRZInAppMessageRawImageStyleGraphic = 0,
/// The image takes the top part of the message.
  BRZInAppMessageRawImageStyleTop = 1,
};

/// The possible values for the Slideup message presentation.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZInAppMessageRawSlideFrom, "_OBJC_BRZInAppMessageRawSlideFrom", open) {
/// Presents the Slideup from the top of the screen.
  BRZInAppMessageRawSlideFromTop = 0,
/// Presents the Slideup from the bottom of the screen.
  BRZInAppMessageRawSlideFromBottom = 1,
};


@interface BRZInAppMessageRaw (SWIFT_EXTENSION(BrazeKit))
/// The message type.
@property (nonatomic) enum BRZInAppMessageRawType type;
/// The message click action.
@property (nonatomic) enum BRZInAppMessageRawClickAction clickAction;
/// The message close option.
@property (nonatomic) enum BRZInAppMessageRawClose messageClose;
/// The message supported orientation.
@property (nonatomic) enum BRZInAppMessageRawOrientation orientation;
/// The message text alignment.
@property (nonatomic) enum BRZInAppMessageRawTextAlignment messageTextAlignment;
/// The message header text alignment.
@property (nonatomic) enum BRZInAppMessageRawTextAlignment headerTextAlignment;
/// The message display duration.
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) enum BRZInAppMessageRawImageStyle imageStyle;
@property (nonatomic) enum BRZInAppMessageRawSlideFrom slideFrom;
@end


@interface BRZConfigurationLocation (SWIFT_EXTENSION(BrazeKit))
@property (nonatomic, strong) id _Nullable brazeLocation SWIFT_UNAVAILABLE_MSG("'brazeLocation' has been renamed to 'brazeLocationProvider'");
@end


@interface BRZConfigurationLogger (SWIFT_EXTENSION(BrazeKit))
@end

/// The log levels supported by the SDK.
typedef SWIFT_ENUM_NAMED(uint8_t, BRZLoggerLevel, "Level", open) {
/// Log debugging information + <code>.info</code> + <code>.error</code>
  BRZLoggerLevelDebug = 0,
/// Log general SDK information (e.g. user changes, etc.) + <code>.error</code>.
  BRZLoggerLevelInfo = 1,
/// Log errors.
  BRZLoggerLevelError = 2,
/// No logging occurs with <code>.disabled</code>.
  BRZLoggerLevelDisabled = 255,
};

enum BRZChannel : NSInteger;

@interface BRZModalContext (SWIFT_EXTENSION(BrazeKit))
/// The Braze channel from which the modal originates.
@property (nonatomic, readonly) enum BRZChannel channel;
@end



@interface BRZNewsFeed (SWIFT_EXTENSION(BrazeKit))
/// Requests an immediate refresh of the newsfeed cards from Braze servers.
/// By default, newsfeed cards are refreshed when a new session starts.
- (void)requestRefresh;
/// Requests an immediate refresh of the newsfeed cards from Braze servers.
/// By default, newsfeed cards are refreshed when a new session starts.
/// \param completion The completion handler executed on the main thread with the result
/// of the refresh operation.
///
- (void)requestRefreshWithCompletion:(void (^ _Nonnull)(NSArray<BRZNewsFeedCard *> * _Nullable, NSError * _Nullable))completion;
@end


@interface BRZNewsFeedCard (SWIFT_EXTENSION(BrazeKit))
@end


/// The Context provides methods to log card analytics and process click actions.
SWIFT_CLASS_NAMED("Context")
@interface BRZNewsFeedCardContext : NSObject
/// Creates and returns a NewsFeed Card context.
/// \param logImpression The log impression implementation.
///
/// \param logClick The log click implementation.
///
/// \param processClickAction The process click action implementation.
///
- (nonnull instancetype)initWithLogImpression:(void (^ _Nonnull)(void))logImpression logClick:(void (^ _Nonnull)(void))logClick processClickAction:(void (^ _Nonnull)(NSURL * _Nonnull, BOOL))processClickAction OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a NewsFeed Card context with a default implementation.
/// Use <code>init(logImpression:logClick:processClickAction:)</code> to customize the implementation.
/// \param card The newsfeed card.
///
/// \param braze The Braze instance.
///
- (nonnull instancetype)initWithCard:(BRZNewsFeedCard * _Nonnull)card using:(Braze * _Nonnull)braze;
/// Logs the newsfeed card impression event.
- (void)logImpression;
/// Logs the newsfeed card click event.
- (void)logClick;
/// Processes the click action.
/// \param url The newsfeed card url.
///
/// \param useWebView Specifies whether <code>url</code> should be openend in a web view.
///
- (void)processClickActionWithURL:(NSURL * _Nonnull)url useWebView:(BOOL)useWebView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BRZNewsFeedCard (SWIFT_EXTENSION(BrazeKit))
/// The news feed cards JSON representation.
- (NSData * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Decodes the JSON into a News Feed card.
+ (nullable instancetype)decodingWithJson:(NSData * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
@end


@interface BRZNewsFeedCard (SWIFT_EXTENSION(BrazeKit))
/// Logs a news feed card impression using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/NewsFeedCard/Context-swift.class/logImpression()</code> instead.
/// \param braze The Braze instance.
///
- (void)logImpressionUsing:(Braze * _Nonnull)braze;
/// Logs a news feed card click using the Braze instance without any safeguarding features.
/// Prefer using <code>Braze/NewsFeedCard/Context-swift.class/logClick()</code> instead.
/// \param braze The Braze instance.
///
- (void)logClickUsing:(Braze * _Nonnull)braze;
@end


@interface BRZNewsFeedCard (SWIFT_EXTENSION(BrazeKit))
@end

/// The NewsFeed Card types supported by the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZNewsFeedCardType, "_OBJC_BRZNewsFeedCardType", open) {
/// The Classic card type.
  BRZNewsFeedCardTypeClassic = 0,
/// The Banner card type.
  BRZNewsFeedCardTypeBanner = 1,
/// The Captioned Image card type.
  BRZNewsFeedCardTypeCaptionedImage = 2,
/// The Text Announcement card type.
  BRZNewsFeedCardTypeTextAnnouncement = 3,
};


/// The NewsFeed Card categories supported by the SDK.
SWIFT_CLASS_NAMED("_OBJC_BRZNewsFeedCardCategory")
@interface BRZNewsFeedCardCategory : NSObject
/// No specific category.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZNewsFeedCardCategory * _Nonnull none;)
+ (BRZNewsFeedCardCategory * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// The news category.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZNewsFeedCardCategory * _Nonnull news;)
+ (BRZNewsFeedCardCategory * _Nonnull)news SWIFT_WARN_UNUSED_RESULT;
/// The advertising category.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZNewsFeedCardCategory * _Nonnull advertising;)
+ (BRZNewsFeedCardCategory * _Nonnull)advertising SWIFT_WARN_UNUSED_RESULT;
/// The announcements category.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZNewsFeedCardCategory * _Nonnull announcements;)
+ (BRZNewsFeedCardCategory * _Nonnull)announcements SWIFT_WARN_UNUSED_RESULT;
/// The social category.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZNewsFeedCardCategory * _Nonnull social;)
+ (BRZNewsFeedCardCategory * _Nonnull)social SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BRZNewsFeedCard (SWIFT_EXTENSION(BrazeKit))
/// The card type (default: <code>.classic</code>).
@property (nonatomic) enum BRZNewsFeedCardType type;
/// The card type (default: <code>.classic</code>).
@property (nonatomic, copy) NSArray<BRZNewsFeedCardCategory *> * _Nonnull categories;
/// The card image aspect ratio (default: <code>1</code>).
@property (nonatomic) double imageAspectRatio;
@end


@interface BRZNotifications (SWIFT_EXTENSION(BrazeKit))
/// Registers the device as eligible to receive push notifications.
/// <h2>Minimal implementation</h2>
/// \code
/// // In AppDelegate implementation.
///
/// func application(
///   _ application: UIApplication,
///   didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
/// ) {
///   AppDelegate.braze?.notifications.register(deviceToken: deviceToken)
/// }
///
/// \endcode\param deviceToken The device token data.
///
- (void)registerDeviceToken:(NSData * _Nonnull)deviceToken;
@end


@interface BRZNotifications (SWIFT_EXTENSION(BrazeKit))
@end


/// Represents a user notification processed by Braze.
SWIFT_CLASS_NAMED("Payload")
@interface BRZNotificationsPayload : NSObject
/// Notification title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Notification subtitle.
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
/// Notification body.
@property (nonatomic, readonly, copy) NSString * _Nullable body;
/// Date at which the payload was received by the application.
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// The notification url and its associated context.
@property (nonatomic, readonly, strong) BRZURLContext * _Nullable urlContext;
/// Notification action identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull actionIdentifier;
/// Flag specifying whether the payload was received silently.
@property (nonatomic, readonly) BOOL isSilent;
/// Flag specifying whether the payload is used by Braze for an internal SDK feature.
@property (nonatomic, readonly) BOOL isInternal;
/// Target scene for multi window support.
@property (nonatomic, readonly, strong) UIScene * _Nullable targetScene SWIFT_AVAILABILITY(ios,introduced=13.0);
/// Notification payload dictionary.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull userInfo;
/// The notification payload JSON representation.
- (NSData * _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// The notification payload user info dictionary JSON representation.
- (NSData * _Nullable)userInfoJSON SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UNNotificationCategory;

@interface BRZNotifications (SWIFT_EXTENSION(BrazeKit))
/// Braze user notification categories.
/// Register these categories on <code>UNUserNotificationCenter.current()</code> to add support for
/// notifications with action buttons.
/// <h2>Minimal implementation</h2>
/// \code
/// UNUserNotificationCenter.current().setNotificationCategories(Braze.Notifications.categories)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSSet<UNNotificationCategory *> * _Nonnull categories;)
+ (NSSet<UNNotificationCategory *> * _Nonnull)categories SWIFT_WARN_UNUSED_RESULT;
+ (void)setCategories:(NSSet<UNNotificationCategory *> * _Nonnull)value;
@end


@interface BRZNotificationsPayload (SWIFT_EXTENSION(BrazeKit))
/// Notification badge.
@property (nonatomic, readonly, strong) NSNumber * _Nullable badge;
@end


@interface BRZConfigurationPush (SWIFT_EXTENSION(BrazeKit))
@end


/// Push automation configuration.
/// See <code>BrazeKit/Braze/Configuration-swift.class/Push-swift.class/automation-swift.property</code> for details.
SWIFT_CLASS_NAMED("Automation")
@interface BRZConfigurationPushAutomation : NSObject
/// The default presentation options for notifications received while the application is running
/// in the foreground.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UNNotificationPresentationOptions defaultForegroundPresentationOptions;)
+ (UNNotificationPresentationOptions)defaultForegroundPresentationOptions SWIFT_WARN_UNUSED_RESULT;
/// Specifies whether Braze should automate app registration and notification categories setup
/// (default: <code>false</code>).
/// When enabled, Braze automatically:
/// <ul>
///   <li>
///     Registers your app to receive remote notifications through Apple Push Notification service
///     (<a href="https://apple.co/41P6ogp"><code>registerForRemoteNotifications()</code></a>).
///   </li>
///   <li>
///     Add the <code>Braze/Notifications-swift.class/categories</code> to the list of supported
///     notification categories on the current <code>UNUserNotificationCenter</code>
///     (<a href="https://apple.co/3ItuvKS"><code>setNotificationCategories(_:)</code></a>) (does not overwrite existing categories).
///   </li>
/// </ul>
@property (nonatomic) BOOL automaticSetup;
/// Specifies whether Braze should request the notification permission / authorization at
/// launch (default: <code>false</code>).
/// See <code>authorizationOptions</code>.
@property (nonatomic) BOOL requestAuthorizationAtLaunch;
/// The permission / authorization options used by Braze when <code>requestAuthorizationAtLaunch</code>
/// is <code>true</code> (default: <code>[.badge, .sound, .alert]</code>).
@property (nonatomic) UNAuthorizationOptions authorizationOptions;
/// The foreground presentation options used when automatically handling notifications
/// originating from Braze and received while the application is in the foreground (default:
/// <code>[.list, .banner]</code>).
@property (nonatomic) UNNotificationPresentationOptions foregroundPresentationOptions;
/// Specifies whether <code>UNUserNotificationCenter.setNotificationCategories(_:)</code> should be
/// swizzled (default: <code>false</code>).
/// When swizzled:
/// <ul>
///   <li>
///     Braze automatically includes the SDK notification categories each time you call
///     <code>setNotificationCategories(_:)</code>
///   </li>
/// </ul>
@property (nonatomic) BOOL setNotificationCategories;
/// Specifies whether
/// <code>UIApplicationDelegate.application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>
/// should be swizzled (default: <code>false</code>).
/// When <code>true</code>,
/// <code>UIApplicationDelegate.application(_:didFailToRegisterForRemoteNotificationsWithError:)</code> is
/// swizzled as well to automatically reports configuration errors.
/// When swizzled:
/// <ul>
///   <li>
///     Braze automatically associates the notification device token with the current user
///   </li>
///   <li>
///     Braze calls any pre-existing implementation of
///     <code>application(_:didRegisterForRemoteNotificationsWithDeviceToken:)</code>
///   </li>
/// </ul>
@property (nonatomic) BOOL registerDeviceToken;
/// Specifies whether
/// <code>UIApplicationDelegate.application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code>
/// should be swizzled (default: false)
/// When swizzled:
/// <ul>
///   <li>
///     Braze automatically handles background notifications
///   </li>
///   <li>
///     Braze calls any pre-existing implementation of
///     <code>application(_:didReceiveRemoteNotification:fetchCompletionHandler:)</code> if the notification
///     does not originate from a Braze campaign
///   </li>
/// </ul>
@property (nonatomic) BOOL handleBackgroundNotification;
/// Specifies whether
/// <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:didReceive:withCompletionHandler:)</code>
/// should be swizzled (default: false)
/// When swizzled:
/// <ul>
///   <li>
///     Braze automatically handles user notifications
///   </li>
///   <li>
///     Braze calls any pre-existing implementation of
///     <code>userNotificationCenter(_:didReceive:withCompletionHandler:)</code> if the notification does not
///     originate from a Braze campaign
///   </li>
/// </ul>
@property (nonatomic) BOOL handleNotificationResponse;
/// Specifies whether
/// <code>UNUserNotificationCenterDelegate.userNotificationCenter(_:willPresent:withCompletionHandler:))</code>
/// should be swizzled (default: false)
/// When swizzled, Braze displays push notifications while the app is running in the foreground.
/// If a pre-existing implementation of
/// <code>userNotificationCenter(_:willPresent:withCompletionHandler:))</code> is defined, Braze will merge
/// the <code>UNNotificationPresentationOptions</code> provided via the completion handler with the values
/// of <code>foregroundPresentationOptions</code>.
@property (nonatomic) BOOL willPresentNotification;
/// Creates and returns a Braze push automation configuration.
/// \param automaticSetup Automate app registration and notification categories setup (default:
/// <code>false</code>).
///
/// \param requestAuthorizationAtLaunch Request the notification permission / authorization at
/// launch (default: <code>false</code>).
///
/// \param authorizationOptions The permission / authorization options used by Braze when
/// <code>requestAuthorizationAtLaunch</code> is enabled (default: <code>[.badge, .sound, .alert]</code>)
///
/// \param foregroundPresentationOptions The foreground presentation options used when
/// automatically handling notifications originating from Braze and received while the
/// application is in the foreground (default: <code>[.list, .banner]</code>).
///
/// \param setNotificationCategories Automatically include the SDK notification categories each
/// time you call <code>setNotificationCategories(_:)</code> (default: <code>false</code>).
///
/// \param registerDeviceToken Automatically register the device token (default: <code>false</code>).
///
/// \param handleBackgroundNotification Automatically handle background notifications (default:
/// <code>false</code>).
///
/// \param handleNotificationResponse Automatically handle notifications responses (default:
/// <code>false</code>).
///
/// \param willPresentNotification Automatically present notifications when the app is running in
/// the foreground (default: <code>false</code>).
///
- (nonnull instancetype)initWithAutomaticSetup:(BOOL)automaticSetup requestAuthorizationAtLaunch:(BOOL)requestAuthorizationAtLaunch authorizationOptions:(UNAuthorizationOptions)authorizationOptions foregroundPresentationOptions:(UNNotificationPresentationOptions)foregroundPresentationOptions setNotificationCategories:(BOOL)setNotificationCategories registerDeviceToken:(BOOL)registerDeviceToken handleBackgroundNotification:(BOOL)handleBackgroundNotification handleNotificationResponse:(BOOL)handleNotificationResponse willPresentNotification:(BOOL)willPresentNotification OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns a Braze push automation configuration with all automations either
/// enabled or disabled.
/// \param enabled Specifies whether all automations should be enabled or disabled.
///
- (nonnull instancetype)initEnablingAllAutomations:(BOOL)enabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKUserContentController;
@class WKScriptMessage;
@class WKUserScript;

SWIFT_CLASS_NAMED("ScriptMessageHandler")
@interface BRZWebViewBridgeScriptMessageHandler : NSObject <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull name;)
+ (NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WKUserScript * _Nonnull script;)
+ (WKUserScript * _Nonnull)script SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;

@interface BRZWebViewBridgeScriptMessageHandler (SWIFT_EXTENSION(BrazeKit))
- (nonnull instancetype)initWithLogClick:(void (^ _Nonnull)(NSString * _Nullable))logClick logError:(void (^ _Nonnull)(NSError * _Nonnull))logError showNewsFeed:(void (^ _Nonnull)(void))showNewsFeed closeMessage:(void (^ _Nonnull)(void))closeMessage braze:(Braze * _Nullable)braze;
@end




@interface BRZURLContext (SWIFT_EXTENSION(BrazeKit))
/// The Braze channel from which the url originates.
@property (nonatomic, readonly) enum BRZChannel channel;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end








@interface BRZUser (SWIFT_EXTENSION(BrazeKit))
- (void)addToCustomAttributeArrayWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("", "addToCustomAttributeStringArrayWithKey");
- (void)removeFromCustomAttributeArrayWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_DEPRECATED_MSG("", "removeFromCustomAttributeStringArrayWithKey");
@end

@class BRZUserGender;
enum BRZUserSubscriptionState : NSInteger;
@class BRZUserAttributionData;

@interface BRZUser (SWIFT_EXTENSION(BrazeKit))
/// Retrieves the current user identifier (<code>nil</code> for the anonymous user).
/// \param completion The completion handler’s parameter is the user identifier. This identifier
/// is <code>nil</code> for the anonymous user. The completion handler is executed on the
/// main queue.
///
- (void)idWithCompletion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// Sets the user email.
/// \param email The email.
///
- (void)setEmail:(NSString * _Nullable)email;
/// Sets the user language.
/// The language must be a valid ISO 639-1 language code. ISO 639-2 language code are accepted
/// for languages without ISO 639-1 equivalent.
/// \param language An ISO 639-1 or ISO 639-2 language code.
///
- (void)setLanguage:(NSString * _Nullable)language;
/// Sets the user gender.
/// \param gender The gender.
///
- (void)setGender:(BRZUserGender * _Nullable)gender;
/// Sets the user email subscription state.
/// \param emailSubscriptionState The email subscription state.
///
- (void)setEmailSubscriptionState:(enum BRZUserSubscriptionState)emailSubscriptionState;
/// Sets the user push notification subscription state.
/// \param pushNotificationSubscriptionState The push notification subscription state.
///
- (void)setPushNotificationSubscriptionState:(enum BRZUserSubscriptionState)pushNotificationSubscriptionState;
/// Sets the user attribution data.
/// \param attributionData The attribution data.
///
- (void)setAttributionData:(BRZUserAttributionData * _Nullable)attributionData;
/// Adds an alias to the user.
/// Individual (alias, label) pairs can exist on one and only one user. If a different user
/// already has this alias or external user id, the alias attempt will be rejected by the
/// platform.
/// \param alias The alias to add.
///
/// \param label The label for the alias. Used to differentiate it from other aliases for the
/// user.
///
- (void)addAlias:(NSString * _Nonnull)alias label:(NSString * _Nonnull)label;
/// Sets a custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param boolValue The custom attribute value.
///
- (void)setCustomAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
/// Sets a custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param doubleValue The custom attribute value.
///
- (void)setCustomAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
/// Sets a custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param intValue The custom attribute value.
///
- (void)setCustomAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
/// Sets a custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param stringValue The custom attribute value.
///
- (void)setCustomAttributeWithKey:(NSString * _Nonnull)key stringValue:(NSString * _Nonnull)stringValue;
/// Sets a custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param dateValue The custom attribute value.
///
- (void)setCustomAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
/// Unsets a custom attribute on the user.
/// \param key The custom attribute key.
///
- (void)unsetCustomAttributeWithKey:(NSString * _Nonnull)key;
/// Increments the value of an custom attribute.
/// Only integer types custom attributes can be incremented. Attempting to increment a custom
/// attribute that is not an integer type will be ignored.
/// If you increment a custom attribute that has not previously been set, a custom attribute
/// will be created and assigned <code>1</code>.
/// \param key The custom attribute key.
///
- (void)incrementCustomUserAttribute:(NSString * _Nonnull)key;
/// Increments the value of an custom attribute.
/// Only integer types custom attributes can be incremented. Attempting to increment a custom
/// attribute that is not an integer type will be ignored.
/// If you increment a custom attribute that has not previously been set, a custom attribute
/// will be created and assigned <code>amount</code>.
/// \param key The custom attribute key.
///
/// \param amount The amount by which to increment the custom attribute.
///
- (void)incrementCustomUserAttribute:(NSString * _Nonnull)key by:(NSInteger)amount;
/// Adds the string value to a custom attribute string array specified by the key.
/// By adding a key that has not previously been set, a custom attribute string array will be
/// created containing the value.
/// \param key The custom attribute key.
///
/// \param value The string to add.
///
- (void)addToCustomAttributeStringArrayWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Removes the string value from a custom attribute string array specified by the key.
/// Removing a value for a key that has not previously been set is a no-op.
/// \param key The custom attribute key.
///
/// \param value The string to remove.
///
- (void)removeFromCustomAttributeStringArrayWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Sets a string array from a custom attribute specified by the key.
/// \param key The custom attribute key.
///
/// \param array The string array to set.
///
- (void)setCustomAttributeArrayWithKey:(NSString * _Nonnull)key array:(NSArray<NSString *> * _Nullable)array;
/// Sets a nested custom attribute array specified by the key.
/// \param key The custom attribute key.
///
/// \param array The nested property array to set.
///
- (void)setNestedCustomAttributeArrayWithKey:(NSString * _Nonnull)key value:(NSArray<NSDictionary<NSString *, id> *> * _Nullable)array;
/// Sets a nested custom attribute dictionary at the provided key.
/// \param key The custom attribute key.
///
/// \param dictionary The nested property dictionary to set.
///
- (void)setNestedCustomAttributeDictionaryWithKey:(NSString * _Nonnull)key value:(NSDictionary<NSString *, id> * _Nullable)dictionary;
/// Sets a nested custom attribute dictionary at the provided key.
/// \param key The custom attribute key.
///
/// \param dictionary The nested property dictionary to set.
///
/// \param merge Whether to merge <code>dictionary</code> with the existing values at <code>key</code>.
///
- (void)setNestedCustomAttributeDictionaryWithKey:(NSString * _Nonnull)key value:(NSDictionary<NSString *, id> * _Nullable)dictionary merge:(BOOL)merge;
/// Sets the last known location for the user.
/// \param latitude The latitude in degrees, must be included in <code>-90...90</code>.
///
/// \param longitude The longitude in degrees, must be included in <code>-180...180</code>.
///
/// \param horizontalAccuracy The horizontal accuracy in meters, must be <code>> 0</code>.
///
- (void)setLastKnownLocationWithLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(double)horizontalAccuracy;
/// Sets the last known location for the user.
/// \param latitude The latitude in degrees, must be included in <code>-90...90</code>.
///
/// \param longitude The longitude in degrees, must be included in <code>-180...180</code>.
///
/// \param altitude The altitude in meters.
///
/// \param horizontalAccuracy The horizontal accuracy in meters, must be <code>> 0</code>.
///
/// \param verticalAccuracy The vertical accuracy in meters. A value <code>0</code> or below will cause
/// <code>verticalAccuracy</code> and <code>altitude</code> to be recorded as <code>nil</code>.
///
- (void)setLastKnownLocationWithLatitude:(double)latitude longitude:(double)longitude altitude:(double)altitude horizontalAccuracy:(double)horizontalAccuracy verticalAccuracy:(double)verticalAccuracy;
/// Sets a location custom attribute on the user.
/// \param key The custom attribute key.
///
/// \param latitude The latitude in degrees, must be included in <code>-90...90</code>.
///
/// \param longitude The longitude in degrees, must be included in <code>-180...180</code>.
///
- (void)setLocationCustomAttributeWithKey:(NSString * _Nonnull)key latitude:(double)latitude longitude:(double)longitude;
/// Unsets a location custom attributes on the user.
/// \param key The custom attribute key.
///
- (void)unsetLocationCustomAttributeWithKey:(NSString * _Nonnull)key;
/// Adds the user to a subscription group.
/// \param id The group identifier, as provided by the Braze platform.
///
- (void)addToSubscriptionGroupWithGroupId:(NSString * _Nonnull)id;
/// Removes the user from a subscription group.
/// \param id The group identifier, as provided by the Braze platform.
///
- (void)removeFromSubscriptionGroupWithGroupId:(NSString * _Nonnull)id;
@end


@interface BRZUser (SWIFT_EXTENSION(BrazeKit))
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setFirstName:) NSString * _Nullable firstName SWIFT_DEPRECATED_MSG("", "set(firstName:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setLastName:) NSString * _Nullable lastName SWIFT_DEPRECATED_MSG("", "set(lastName:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setEmail:) NSString * _Nullable email SWIFT_DEPRECATED_MSG("", "set(email:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setDateOfBirth:) NSDate * _Nullable dateOfBirth SWIFT_DEPRECATED_MSG("", "set(dateOfBirth:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setCountry:) NSString * _Nullable country SWIFT_DEPRECATED_MSG("", "set(country:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setHomeCity:) NSString * _Nullable homeCity SWIFT_DEPRECATED_MSG("", "set(homeCity:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setLanguage:) NSString * _Nullable language SWIFT_DEPRECATED_MSG("", "set(language:)");
/// Provided for compatibility.
@property (nonatomic, copy, setter=_compat_setPhone:) NSString * _Nullable phone SWIFT_DEPRECATED_MSG("", "set(phoneNumber:)");
/// Provided for compatibility.
@property (nonatomic, readonly, copy) NSString * _Nullable userID SWIFT_DEPRECATED_MSG("", "id(queue:completion:)");
/// Provided for compatibility.
@property (nonatomic, copy) NSString * _Nullable avatarImageURL SWIFT_DEPRECATED_MSG("avatarImageURL is not supported by Braze anymore");
/// Provided for compatibility.
@property (nonatomic, strong) id _Nullable facebookUser SWIFT_DEPRECATED_MSG("facebookUser is not supported by Braze anymore");
/// Provided for compatibility.
@property (nonatomic, strong) id _Nullable twitterUser SWIFT_DEPRECATED_MSG("twitterUser is not supported by Braze anymore");
/// Provided for compatibility.
@property (nonatomic, strong, setter=_compat_setAttributionData:) id _Nullable attributionData SWIFT_DEPRECATED_MSG("", "set(attributionData:)");
/// Provided for compatibility.
- (BOOL)addAlias:(NSString * _Nonnull)alias withLabel:(NSString * _Nonnull)label SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "add(alias:label:)");
/// Provided for compatibility.
- (BOOL)setEmailNotificationSubscriptionType:(NSInteger)emailNotificationSubscriptionType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "set(emailSubscriptionState:)");
/// Provided for compatibility.
- (BOOL)setPushNotificationSubscriptionType:(NSInteger)pushNotificationSubscriptionType SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "set(pushNotificationSubscriptionState:)");
/// Provided for compatibility.
- (BOOL)setCustomAttributeWithKey:(NSString * _Nonnull)key andBOOLValue:(BOOL)value SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setCustomAttribute(key:value:)");
/// Provided for compatibility.
- (BOOL)setCustomAttributeWithKey:(NSString * _Nonnull)key andIntegerValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setCustomAttribute(key:value:)");
/// Provided for compatibility.
- (BOOL)setCustomAttributeWithKey:(NSString * _Nonnull)key andDoubleValue:(double)value SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setCustomAttribute(key:value:)");
/// Provided for compatibility.
- (BOOL)setCustomAttributeWithKey:(NSString * _Nonnull)key andStringValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setCustomAttribute(key:value:)");
/// Provided for compatibility.
- (BOOL)setCustomAttributeWithKey:(NSString * _Nonnull)key andDateValue:(NSDate * _Nonnull)value SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setCustomAttribute(key:value:)");
/// Provided for compatibility.
- (BOOL)setLastKnownLocationWithLatitude:(double)latitude longitude:(double)longitude horizontalAccuracy:(double)horizontalAccuracy altitude:(double)altitude verticalAccuracy:(double)verticalAccuracy SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setLastKnownLocation(latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:)");
/// Provided for compatibility.
- (BOOL)addLocationCustomAttributeWithKey:(NSString * _Nonnull)key latitude:(double)latitude longitude:(double)longitude SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "setLocationCustomAttribute(key:latitude:longitude:)");
/// Provided for compatibility.
- (BOOL)removeLocationCustomAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "unsetLocationCustomAttribute(key:)");
@end


/// Messaging channels supported by the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZChannel, "_OBJC_BRZChannel", open) {
/// Push notification channel.
  BRZChannelNotification = 0,
/// In-App Message channel.
  BRZChannelInAppMessage = 1,
/// News Feed channel
  BRZChannelNewsFeed = 2,
/// Content Cards channel.
  BRZChannelContentCard = 3,
};

/// Request policies supported by the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZRequestPolicy, "_OBJC_BRZRequestPolicy", open) {
/// Automatically handle all server communication.
/// This includes flushing analytics data to the server and requesting new in-app messages.
/// Braze’s communication policy is to perform immediate server requests when user facing data
/// is required (new in-app messages, etc.), and to otherwise perform periodic flushes of new
/// analytics data every few seconds
/// (<code>Braze/Configuration-swift.class/Api-swift.class/flushInterval</code>).
  BRZRequestPolicyAutomatic = 0,
/// Data flushes must be manually performed.
/// Behaves similarly to <code>automatic</code>, except that updates to custom attributes and
/// custom events don’t automatically flush to the server. Instead, you must call
/// <code>Braze/requestImmediateDataFlush()</code> when you want to synchronize newly updated user data
/// with Braze.
/// Note that the configuration does not turn off all networking, i.e. requests important to the
/// proper functionality of the Braze SDK will still occur.
  BRZRequestPolicyManual = 1,
};

/// Internal.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZSDKFlavor, "_OBJC_BRZSDKFlavor", open) {
  BRZSDKFlavorVanilla = 0,
  BRZSDKFlavorUnity = 1,
  BRZSDKFlavorReact = 2,
  BRZSDKFlavorCordova = 3,
  BRZSDKFlavorXamarin = 4,
  BRZSDKFlavorFlutter = 5,
  BRZSDKFlavorSegment = 6,
  BRZSDKFlavorMparticle = 7,
  BRZSDKFlavorTealium = 8,
};


SWIFT_CLASS_NAMED("_OBJC_BRZSDKMetadata")
@interface BRZSDKMetadata : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull adjust;)
+ (BRZSDKMetadata * _Nonnull)adjust SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull airbridge;)
+ (BRZSDKMetadata * _Nonnull)airbridge SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull appsflyer;)
+ (BRZSDKMetadata * _Nonnull)appsflyer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull bluedot;)
+ (BRZSDKMetadata * _Nonnull)bluedot SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull branch;)
+ (BRZSDKMetadata * _Nonnull)branch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull cordova;)
+ (BRZSDKMetadata * _Nonnull)cordova SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull carthage;)
+ (BRZSDKMetadata * _Nonnull)carthage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull cocoapods;)
+ (BRZSDKMetadata * _Nonnull)cocoapods SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull cordovapm;)
+ (BRZSDKMetadata * _Nonnull)cordovapm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull expo;)
+ (BRZSDKMetadata * _Nonnull)expo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull foursquare;)
+ (BRZSDKMetadata * _Nonnull)foursquare SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull flutter;)
+ (BRZSDKMetadata * _Nonnull)flutter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull googletagmanager;)
+ (BRZSDKMetadata * _Nonnull)googletagmanager SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull gimbal;)
+ (BRZSDKMetadata * _Nonnull)gimbal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull gradle;)
+ (BRZSDKMetadata * _Nonnull)gradle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull ionic;)
+ (BRZSDKMetadata * _Nonnull)ionic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull kochava;)
+ (BRZSDKMetadata * _Nonnull)kochava SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull manual;)
+ (BRZSDKMetadata * _Nonnull)manual SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull maccatalyst;)
+ (BRZSDKMetadata * _Nonnull)maccatalyst SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull mparticle;)
+ (BRZSDKMetadata * _Nonnull)mparticle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull nativescript;)
+ (BRZSDKMetadata * _Nonnull)nativescript SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull npm;)
+ (BRZSDKMetadata * _Nonnull)npm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull nuget;)
+ (BRZSDKMetadata * _Nonnull)nuget SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull pub;)
+ (BRZSDKMetadata * _Nonnull)pub SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull radar;)
+ (BRZSDKMetadata * _Nonnull)radar SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull reactnative;)
+ (BRZSDKMetadata * _Nonnull)reactnative SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull reactnativenewarch;)
+ (BRZSDKMetadata * _Nonnull)reactnativenewarch SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull segment;)
+ (BRZSDKMetadata * _Nonnull)segment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull singular;)
+ (BRZSDKMetadata * _Nonnull)singular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull swiftpm;)
+ (BRZSDKMetadata * _Nonnull)swiftpm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull tealium;)
+ (BRZSDKMetadata * _Nonnull)tealium SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull unreal;)
+ (BRZSDKMetadata * _Nonnull)unreal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull unitypm;)
+ (BRZSDKMetadata * _Nonnull)unitypm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull unity;)
+ (BRZSDKMetadata * _Nonnull)unity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull vizbee;)
+ (BRZSDKMetadata * _Nonnull)vizbee SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZSDKMetadata * _Nonnull xamarin;)
+ (BRZSDKMetadata * _Nonnull)xamarin SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The category of Braze SDK properties to be marked for user tracking.
SWIFT_CLASS_NAMED("_OBJC_BRZTrackingProperty")
@interface BRZTrackingProperty : NSObject
/// The user’s device data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull deviceData;)
+ (BRZTrackingProperty * _Nonnull)deviceData SWIFT_WARN_UNUSED_RESULT;
/// The user’s first name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull firstName;)
+ (BRZTrackingProperty * _Nonnull)firstName SWIFT_WARN_UNUSED_RESULT;
/// The user’s last name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull lastName;)
+ (BRZTrackingProperty * _Nonnull)lastName SWIFT_WARN_UNUSED_RESULT;
/// The user’s email address.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull email;)
+ (BRZTrackingProperty * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// The user’s date of birth.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull dateOfBirth;)
+ (BRZTrackingProperty * _Nonnull)dateOfBirth SWIFT_WARN_UNUSED_RESULT;
/// The user’s country.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull country;)
+ (BRZTrackingProperty * _Nonnull)country SWIFT_WARN_UNUSED_RESULT;
/// The user’s language.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull language;)
+ (BRZTrackingProperty * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// The user’s home city.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull homeCity;)
+ (BRZTrackingProperty * _Nonnull)homeCity SWIFT_WARN_UNUSED_RESULT;
/// The user’s gender.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull gender;)
+ (BRZTrackingProperty * _Nonnull)gender SWIFT_WARN_UNUSED_RESULT;
/// The user’s phone number.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull phoneNumber;)
+ (BRZTrackingProperty * _Nonnull)phoneNumber SWIFT_WARN_UNUSED_RESULT;
/// The user’s email subscription state.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull emailSubscriptionState;)
+ (BRZTrackingProperty * _Nonnull)emailSubscriptionState SWIFT_WARN_UNUSED_RESULT;
/// The user’s notification subscription state.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull notificationSubscriptionState;)
+ (BRZTrackingProperty * _Nonnull)notificationSubscriptionState SWIFT_WARN_UNUSED_RESULT;
/// The user’s attribution data.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull attributionData;)
+ (BRZTrackingProperty * _Nonnull)attributionData SWIFT_WARN_UNUSED_RESULT;
/// The user’s push token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull pushToken;)
+ (BRZTrackingProperty * _Nonnull)pushToken SWIFT_WARN_UNUSED_RESULT;
/// The user’s push-to-start tokens.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull pushToStartTokens;)
+ (BRZTrackingProperty * _Nonnull)pushToStartTokens SWIFT_WARN_UNUSED_RESULT;
/// A set of custom attribute names.
+ (BRZTrackingProperty * _Nonnull)customAttributeWithAttributes:(NSSet<NSString *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
/// Mark all custom attributes for tracking.
/// Adding this property will cause the <code>.customAttribute</code> case to be a no-op.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull allCustomAttributes;)
+ (BRZTrackingProperty * _Nonnull)allCustomAttributes SWIFT_WARN_UNUSED_RESULT;
/// Braze events for analytics.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull analyticsEvents;)
+ (BRZTrackingProperty * _Nonnull)analyticsEvents SWIFT_WARN_UNUSED_RESULT;
/// Purchase events.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull purchases;)
+ (BRZTrackingProperty * _Nonnull)purchases SWIFT_WARN_UNUSED_RESULT;
/// A set of custom event names.
+ (BRZTrackingProperty * _Nonnull)customEventWithEvents:(NSSet<NSString *> * _Nonnull)events SWIFT_WARN_UNUSED_RESULT;
/// Mark all custom events for tracking.
/// Adding this property will cause the <code>.customEvent</code> case to be a no-op.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull allCustomEvents;)
+ (BRZTrackingProperty * _Nonnull)allCustomEvents SWIFT_WARN_UNUSED_RESULT;
/// Mark every user data for tracking.
/// Adding this property will cause other cases to be a no-op as everything will be routed to the tracking domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZTrackingProperty * _Nonnull everything;)
+ (BRZTrackingProperty * _Nonnull)everything SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The user attribution data.
SWIFT_CLASS_NAMED("_OBJC_BRZUserAttributionData")
@interface BRZUserAttributionData : NSObject
/// The attribution network.
@property (nonatomic, readonly, copy) NSString * _Nullable network;
/// The attribution campaign.
@property (nonatomic, readonly, copy) NSString * _Nullable campaign;
/// The attribution ad group.
@property (nonatomic, readonly, copy) NSString * _Nullable adGroup;
/// The attribution creative.
@property (nonatomic, readonly, copy) NSString * _Nullable creative;
- (nonnull instancetype)initWithNetwork:(NSString * _Nullable)network campaign:(NSString * _Nullable)campaign adGroup:(NSString * _Nullable)adGroup creative:(NSString * _Nullable)creative OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The gender values supported by the Braze SDK.
SWIFT_CLASS_NAMED("_OBJC_BRZUserGender")
@interface BRZUserGender : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull male;)
+ (BRZUserGender * _Nonnull)male SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull female;)
+ (BRZUserGender * _Nonnull)female SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull other;)
+ (BRZUserGender * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull unknown;)
+ (BRZUserGender * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull notApplicable;)
+ (BRZUserGender * _Nonnull)notApplicable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BRZUserGender * _Nonnull preferNotToSay;)
+ (BRZUserGender * _Nonnull)preferNotToSay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The possible subscription states supported by the Braze SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZUserSubscriptionState, "_OBJC_BRZUserSubscriptionState", open) {
/// Subscribed, and explicitly opted in.
  BRZUserSubscriptionStateOptedIn = 0,
/// Subscribed, but not explicitly opted in.
  BRZUserSubscriptionStateSubscribed = 1,
/// Unsubscribed and/or explicitly opted out.
  BRZUserSubscriptionStateUnsubscribed = 2,
};

enum BRZTriggerEvent : NSInteger;

/// Delegate for <code>Braze</code> optionally react to the SDK lifecycle events (e.g. SDK opening an URL,
/// presenting a web view, etc.)
SWIFT_PROTOCOL_NAMED("_OBJC_BrazeDelegate")
@protocol BrazeDelegate
@optional
/// Asks the delegate if Braze should open the url specified in the context.
/// This delegate method is called whenever the user attempts to open an url sent by Braze.
/// Writable properties of the <code>context</code> can be modified to customize how Braze handles the url.
/// See <code>Braze/URLContext</code> for more details.
/// \param braze The braze instance.
///
/// \param context The url context.
///
///
/// returns:
/// <code>true</code> to let Braze open the URL, <code>false</code> to prevent Braze from opening the URL.
- (BOOL)braze:(Braze * _Nonnull)braze shouldOpenURL:(BRZURLContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that Braze is about to present a modal.
/// Writable properties of the <code>context</code> can be modified to customize how Braze presents the
/// modal.
/// See <code>Braze/ModalContext</code> for more details.
/// \param braze The braze instance.
///
/// \param context The modal context.
///
- (void)braze:(Braze * _Nonnull)braze willPresentModalWithContext:(BRZModalContext * _Nonnull)context;
/// Notifies the delegate that Braze did not find a matching trigger for the event.
/// This delegate method is called everytime the SDK process an event but no In-App Message
/// campaign is setup for that event.
/// \param braze The braze instance.
///
/// \param event The trigger event.
///
/// \param name The custom event name, purchase product identifier or nil for other type of events.
///
/// \param properties The custom event / purchase properties.
///
- (void)braze:(Braze * _Nonnull)braze noMatchingTriggerForEvent:(enum BRZTriggerEvent)event name:(NSString * _Nullable)name properties:(NSDictionary<NSString *, id> * _Nullable)properties;
/// Notify the delegate that Braze was unable to authenticate the current user with the Braze api.
/// Authentication can fail because of an expired or invalid signature.
/// You are responsible for providing the Braze SDK a valid signature when this delegate method is
/// called.
/// SDK requests will retry periodically using an exponential backoff approach. After 50
/// consecutive failed attempts, retries will be paused until the next session start.
/// important:
/// This API has been moved to a separate protocol <code>BrazeSDKAuthDelegate</code>
/// and will be removed in a future version.
/// \param braze The braze instance.
///
/// \param error The authentication error.
///
- (void)braze:(Braze * _Nonnull)braze sdkAuthenticationFailedWithError:(BRZSDKAuthenticationError * _Nonnull)error;
@end


/// An in-app message presenter is responsible for presenting Braze in-app messages to the user.
/// Braze provides a default implementation of this presenter with the <code>BrazeUI/BrazeInAppMessageUI</code>
/// class. See <code>Braze/inAppMessagePresenter</code> for more details.
SWIFT_PROTOCOL_NAMED("_OBJC_BrazeInAppMessagePresenter")
@protocol BrazeInAppMessagePresenter
/// Presents the in-app message to the end user.
/// When the presenter is set on <code>Braze/inAppMessagePresenter</code>, this method is executed every
/// time an in-app message is triggered.
/// The in-app message presenter is responsible for implementing any queuing strategy for cases
/// when the in-app message cannot be presented to the user directly (e.g. other in-app message
/// already visible on screen)
/// Custom in-app message presenter must:
/// <ul>
///   <li>
///     log impressions by calling <code>Braze/InAppMessageRaw/Context/logImpression()</code> using
///     <code>message.context</code>
///   </li>
///   <li>
///     log clicks by calling <code>Braze/InAppMessageRaw/Context/logClick(buttonId:)</code> using
///     <code>message.context</code>
///   </li>
/// </ul>
/// \param message The message to present.
///
- (void)presentMessage:(BRZInAppMessageRaw * _Nonnull)message;
@end

@class NSUUID;
enum BRZSessionState : NSInteger;

/// Session event as reported by the SDK.
SWIFT_CLASS_NAMED("_OBJC_BrazeSessionEvent")
@interface BRZSessionEvent : NSObject
/// The id of the session.
@property (nonatomic, readonly, copy) NSUUID * _Nonnull sessionId;
/// The state of the session.
@property (nonatomic, readonly) enum BRZSessionState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of session states.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZSessionState, "_OBJC_BrazeSessionState", open) {
/// The session started.
  BRZSessionStateStarted = 0,
/// The session ended.
  BRZSessionStateEnded = 1,
};

/// The events supported by the triggering engine.
typedef SWIFT_ENUM_NAMED(NSInteger, BRZTriggerEvent, "_OBJC_TriggerEvent", open) {
/// The session start event.
  BRZTriggerEventSessionStart = 0,
/// The custom event.
  BRZTriggerEventCustomEvent = 1,
/// The purchase event.
  BRZTriggerEventPurchase = 2,
/// Any other kind of event that can trigger an in-app message.
  BRZTriggerEventOther = 3,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
